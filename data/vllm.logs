
-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items., Agent can talk with other agents, you need to specify the agent name and the topic.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['store_items', 'smelting_items'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to store 5 wooden planks in the chest and then smelt 3 iron ores in the furnace to make iron ingots. Meanwhile, Agent Bob needs to talk with Agent Alice about the topic of 'resource gathering'.", 'entities': ['zombie', 'sheep', 'cow'], 'materials': ['wooden', 'stone', 'iron'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'sunny', 'milestones': ['Agent Alice stores 5 wooden planks in the chest', 'Agent Alice smelts 3 iron ores in the furnace', "Agent Bob talks with Agent Alice about 'resource gathering'"]}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['store_items', 'smelting_items'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to store 5 wooden planks in the chest and then smelt 3 iron ores in the furnace to make iron ingots. Meanwhile, Agent Bob needs to talk with Agent Alice about the topic of 'resource gathering'.", 'entities': ['zombie', 'sheep', 'cow'], 'materials': ['wooden', 'stone', 'iron'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'sunny', 'milestones': ['Agent Alice stores 5 wooden planks in the chest', 'Agent Alice smelts 3 iron ores in the furnace', "Agent Bob talks with Agent Alice about 'resource gathering'"]}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can fish, you need to set the water and the fish and the fishing rod., Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['fishing', 'storing'], 'agents': ['Alice'], 'task_description': 'Alice needs to fish for cod in the nearby lake using a fishing rod and then store the caught fish in a chest.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'savanna', 'milestones': ['Alice has a fishing rod', 'Alice is near the lake', 'Alice has caught a cod', 'Alice has stored the cod in a chest']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['fishing', 'storing'], 'agents': ['Alice'], 'task_description': 'Alice needs to fish for cod in the nearby lake using a fishing rod and then store the caught fish in a chest.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'savanna', 'milestones': ['Alice has a fishing rod', 'Alice is near the lake', 'Alice has caught a cod', 'Alice has stored the cod in a chest']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can craft items, you need to specify the item name and give materials to the agent or put the item in the chest or set the item in the environment., Agent can perform movement, you can ask the agent to jump forward back left right for Seconds.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['craft', 'move'], 'agents': ['Alice'], 'task_description': 'Craft a wooden axe and move 5 blocks forward to reach the forest.', 'entities': ['tree', 'sheep'], 'materials': ['wooden'], 'equipments': [], 'tools': ['axe'], 'environment': 'taiga', 'milestones': ['Craft a wooden axe', 'Move 5 blocks forward to reach the forest']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['craft', 'move'], 'agents': ['Alice'], 'task_description': 'Craft a wooden axe and move 5 blocks forward to reach the forest.', 'entities': ['tree', 'sheep'], 'materials': ['wooden'], 'equipments': [], 'tools': ['axe'], 'environment': 'taiga', 'milestones': ['Craft a wooden axe', 'Move 5 blocks forward to reach the forest']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can sleep and wake up, please set the bed and the time., Agent can talk with other agents, you need to specify the agent name and the topic.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['sleep', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to sleep for 5 minutes and then wake up. After waking up, she needs to talk to Agent Bob about the topic 'building a new house'.", 'entities': ['sheep', 'cow', 'chicken'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'desert', 'milestones': [{'milestone': 'Agent Alice sleeps for 5 minutes', 'reward': 10}, {'milestone': 'Agent Alice talks to Agent Bob about building a new house', 'reward': 20}]}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['sleep', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to sleep for 5 minutes and then wake up. After waking up, she needs to talk to Agent Bob about the topic 'building a new house'.", 'entities': ['sheep', 'cow', 'chicken'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'desert', 'milestones': [{'milestone': 'Agent Alice sleeps for 5 minutes', 'reward': 10}, {'milestone': 'Agent Alice talks to Agent Bob about building a new house', 'reward': 20}]}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can read the signs, you need to write the text on the sign., Agent can equip items, you need to specify the item name and the agent name, or put the item in the chest and remind the agent to equip it.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['read_sign', 'equip_item'], 'agents': ['Alice', 'Bob'], 'task_description': 'Read the sign near the oak tree and equip the wooden axe from the chest to collect wood for crafting.', 'entities': ['sheep', 'cow', 'chicken'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'savanna', 'milestones': ['Read the sign near the oak tree', 'Equip the wooden axe from the chest', 'Collect 5 wood logs']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can dig the ground, you need to set the block and give the agent a tool., Agent can talk with other agents, you need to specify the agent name and the topic.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can read the signs, you need to write the text on the sign., Agent can perform movement, you can ask the agent to jump forward back left right for Seconds.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['read sign', 'jump forward'], 'agents': ['Alice'], 'task_description': 'Read the sign in front of you and then jump forward for 2 seconds to reach the wooden bridge.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'boots'], 'tools': ['axe', 'pickaxe'], 'environment': 'snowy', 'milestones': ['read sign', 'reach wooden bridge']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['read sign', 'jump forward'], 'agents': ['Alice'], 'task_description': 'Read the sign in front of you and then jump forward for 2 seconds to reach the wooden bridge.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'boots'], 'tools': ['axe', 'pickaxe'], 'environment': 'snowy', 'milestones': ['read sign', 'reach wooden bridge']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can fish, you need to set the water and the fish and the fishing rod., Agent can interact with doors, buttons, levers, pressure plates, and trapdoors. You need to set them and let the agent interact with them.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['fishing', 'interacting with doors'], 'agents': ['Alice'], 'task_description': 'Alice needs to catch 5 cod using a fishing rod near the water and then enter the house by opening the door.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'snowy', 'milestones': ['Alice has a fishing rod', 'Alice is near the water', 'Alice catches 5 cod', 'Alice opens the door', 'Alice enters the house']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['fishing', 'interacting with doors'], 'agents': ['Alice'], 'task_description': 'Alice needs to catch 5 cod using a fishing rod near the water and then enter the house by opening the door.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'snowy', 'milestones': ['Alice has a fishing rod', 'Alice is near the water', 'Alice catches 5 cod', 'Alice opens the door', 'Alice enters the house']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can equip items, you need to specify the item name and the agent name, or put the item in the chest and remind the agent to equip it., Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['equip', 'smelt'], 'agents': ['Alice', 'Bob'], 'task_description': 'Equip Alice with a stone pickaxe and smelt 5 iron ores in the furnace to produce iron ingots.', 'entities': ['zombie', 'skeleton'], 'materials': ['stone', 'iron'], 'equipments': ['pickaxe'], 'tools': ['pickaxe'], 'environment': 'rainy', 'milestones': ['Alice equips a stone pickaxe', 'Alice smelts 5 iron ores in the furnace', 'Bob stores the produced iron ingots in the chest']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['equip', 'smelt'], 'agents': ['Alice', 'Bob'], 'task_description': 'Equip Alice with a stone pickaxe and smelt 5 iron ores in the furnace to produce iron ingots.', 'entities': ['zombie', 'skeleton'], 'materials': ['stone', 'iron'], 'equipments': ['pickaxe'], 'tools': ['pickaxe'], 'environment': 'rainy', 'milestones': ['Alice equips a stone pickaxe', 'Alice smelts 5 iron ores in the furnace', 'Bob stores the produced iron ingots in the chest']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items., Agent can feed animals, mount the horse.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['store items', 'smelting items'], 'agents': ['Alice'], 'task_description': 'Alice needs to collect 10 wooden logs and store them in the chest. Then, she needs to smelt 5 wooden logs in the furnace to produce charcoal.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'stormy', 'milestones': ['Collect 10 wooden logs', 'Store 10 wooden logs in the chest', 'Smelt 5 wooden logs in the furnace to produce charcoal']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['store items', 'smelting items'], 'agents': ['Alice'], 'task_description': 'Alice needs to collect 10 wooden logs and store them in the chest. Then, she needs to smelt 5 wooden logs in the furnace to produce charcoal.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'stormy', 'milestones': ['Collect 10 wooden logs', 'Store 10 wooden logs in the chest', 'Smelt 5 wooden logs in the furnace to produce charcoal']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can feed animals, mount the horse., Agent can perform movement, you can ask the agent to jump forward back left right for Seconds.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['move', 'feed'], 'agents': ['Alice'], 'task_description': 'Move to the nearby sheep and feed it with wheat seeds.', 'entities': ['sheep'], 'materials': [], 'equipments': [], 'tools': [], 'environment': 'taiga', 'milestones': ['Find a sheep within 10 blocks', 'Feed the sheep with wheat seeds'], 'food': ['wheat_seeds']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['move', 'feed'], 'agents': ['Alice'], 'task_description': 'Move to the nearby sheep and feed it with wheat seeds.', 'entities': ['sheep'], 'materials': [], 'equipments': [], 'tools': [], 'environment': 'taiga', 'milestones': ['Find a sheep within 10 blocks', 'Feed the sheep with wheat seeds'], 'food': ['wheat_seeds']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'facing': 'north', 'name': 'chest', 'position': [-5, -60, 0]}], 'sign_info': '', 'nearby_entities': [{'cod': [0, -60, 0]}, {'salmon': [1, -60, 1]}, {'pufferfish': [2, -60, 0]}, {'sheep': [-3, -59, 6]}, {'cow': [-3, -59, 6]}, {'rabbit': [-2, -59, 6]}], 'time': 'day'}
*** The task *** : Move to the nearby sheep and feed it with wheat seeds..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-4, -60, 1] and is holding one wheat seed.
**Blocks:** 
- A chest at position [-5, -60, 0] facing north.
- Water at position [-5, -61, 0].
- Dirt at position [-5, -62, 0].
**Creatures:** 
- A cod at position [0, -60, 0].
- A salmon at position [1, -60, 1].
- A pufferfish at position [2, -60, 0].
- A sheep at position [-3, -59, 6].
- A cow at position [-3, -59, 6].
- A rabbit at position [-2, -59, 6].
**Interactive-Items:** None mentioned (e.g., no crafting table or furnace in the given environment info).
To complete the task, Alice needs to move to the sheep's location at [-3, -59, 6] and feed it with the wheat seeds she is holding.
Sign info: 


The high-level task:
{'description': 'Move to the nearby sheep and feed it with wheat seeds.', 'meta-data': {'milestones': ['Find a sheep within 10 blocks', 'Feed the sheep with wheat seeds']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'get_entity_info', 'equipItem', 'UseItemOnEntity'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'facing': 'north', 'name': 'chest', 'position': [-5, -60, 0]}], 'sign_info': '', 'nearby_entities': [{'cod': [0, -60, 0]}, {'salmon': [1, -60, 1]}, {'pufferfish': [2, -60, 0]}, {'sheep': [-3, -59, 6]}, {'cow': [-3, -59, 6]}, {'rabbit': [-2, -59, 6]}], 'time': 'day'}
*** The task *** : Navigate to the sheep's location at [-3, -59, 6] from current position [-4, -60, 1].
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'facing': 'north', 'name': 'chest', 'position': [-5, -60, 0]}], 'sign_info': '', 'nearby_entities': [{'cod': [0, -60, 0]}, {'salmon': [1, -60, 1]}, {'pufferfish': [2, -60, 0]}, {'sheep': [-3, -59, 6]}, {'cow': [-3, -59, 6]}, {'rabbit': [-2, -59, 6]}], 'time': 'day'}
*** The task *** : Move to the nearby sheep and feed it with wheat seeds..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-4, -60, 1] and is holding one wheat seed.
**Blocks:** 
- A chest at position [-5, -60, 0] facing north.
- Water at position [-5, -61, 0].
- Dirt at position [-5, -62, 0].
**Creatures:** 
- A cod at position [0, -60, 0].
- A salmon at position [1, -60, 1].
- A pufferfish at position [2, -60, 0].
- A sheep at position [-3, -59, 6].
- A cow at position [-3, -59, 6].
- A rabbit at position [-2, -59, 6].
**Interactive-Items:** None mentioned (e.g., no crafting table or furnace in the given environment info).
To complete the task, Alice needs to move to the sheep's location at [-3, -59, 6] and feed it with the wheat seeds she is holding.
Sign info: 

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the sheep's location at [-3, -59, 6] from current position [-4, -60, 1] and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'get_entity_info', 'equipItem', 'UseItemOnEntity'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the nearby sheep and feed it with wheat seeds.', 'meta-data': {'milestones': ['Find a sheep within 10 blocks', 'Feed the sheep with wheat seeds']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'facing': 'north', 'name': 'chest', 'position': [-5, -60, 0]}], 'sign_info': '', 'nearby_entities': [{'cod': [0, -60, 0]}, {'salmon': [1, -60, 1]}, {'pufferfish': [2, -60, 0]}, {'sheep': [-3, -59, 6]}, {'cow': [-3, -59, 6]}, {'rabbit': [-2, -59, 6]}], 'time': 'day'}
*** The task *** : Navigate to the sheep's location at [-3, -59, 6] from current position [-4, -60, 1].
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'facing': 'north', 'name': 'chest', 'position': [-5, -60, 0]}], 'sign_info': '', 'nearby_entities': [{'cod': [0, -60, 0]}, {'salmon': [1, -60, 1]}, {'pufferfish': [2, -60, 0]}, {'sheep': [-3, -59, 6]}, {'cow': [-3, -59, 6]}, {'rabbit': [-2, -59, 6]}], 'time': 'day'}
*** The task *** : Move to the nearby sheep and feed it with wheat seeds..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-4, -60, 1] and is holding one wheat seed.
**Blocks:** 
- A chest at position [-5, -60, 0] facing north.
- Water at position [-5, -61, 0].
- Dirt at position [-5, -62, 0].
**Creatures:** 
- A cod at position [0, -60, 0].
- A salmon at position [1, -60, 1].
- A pufferfish at position [2, -60, 0].
- A sheep at position [-3, -59, 6].
- A cow at position [-3, -59, 6].
- A rabbit at position [-2, -59, 6].
**Interactive-Items:** None mentioned (e.g., no crafting table, furnace, or stone pressure plate).

To complete the task of moving to the nearby sheep and feeding it with wheat seeds:
1. Move to the sheep's location at [-3, -59, 6].
2. Feed the sheep with the wheat seeds that Alice is holding.

Note: The cow and rabbit are also nearby, but the task specifically mentions feeding
Sign info: 

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the sheep's location at [-3, -59, 6] from current position [-4, -60, 1] and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'get_entity_info', 'equipItem', 'UseItemOnEntity'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the nearby sheep and feed it with wheat seeds.', 'meta-data': {'milestones': ['Find a sheep within 10 blocks', 'Feed the sheep with wheat seeds']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can get the information of the entities or agents, you can ask the agent to get the information of the entities or agents., Agent can perform movement, you can ask the agent to jump forward back left right for Seconds.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['move', 'get_info'], 'agents': ['Alice', 'Bob'], 'task_description': 'Move to the nearby forest and get information about the sheep entities.', 'entities': ['sheep', 'cow', 'rabbit'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'boots'], 'tools': ['axe', 'shovel'], 'environment': 'rainy', 'milestones': ['Move to the forest within 10 seconds', 'Get information about 3 sheep entities within 20 seconds']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['move', 'get_info'], 'agents': ['Alice', 'Bob'], 'task_description': 'Move to the nearby forest and get information about the sheep entities.', 'entities': ['sheep', 'cow', 'rabbit'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'boots'], 'tools': ['axe', 'shovel'], 'environment': 'rainy', 'milestones': ['Move to the forest within 10 seconds', 'Get information about 3 sheep entities within 20 seconds']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'sandstone_wall', 'position': [1, -59, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 2]}, {'name': 'cut_sandstone', 'position': [0, -60, 3]}, {'name': 'jigsaw', 'position': [4, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [4, -59, 1], 'powered': False}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [5, -59, 1], 'powered': False}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 3]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [5, -59, 3]}, {'name': 'jigsaw', 'position': [2, -60, 3]}, {'name': 'dirt', 'position': [1, -61, 7]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 10]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Move to the nearby forest and get information about the sheep entities..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-3, -59, 14] and is holding a fishing rod.
Blocks: 
- a chest at position [0, -60, 0] facing north
- a crafting table at position [5, -60, 0] and another at position [-10, -60, 15]
- a furnace at position [-11, -60, 15]
- a jungle fence gate at position [4, -59, 1] and another at position [5, -59, 1], both facing south and closed
- an oak trapdoor at position [-4, -60, 15] facing north and closed
- an oak door at position [-8, -60, 15] facing north and closed
- an oak door at position [1, -59, 3] facing east and closed
- a wall torch at position [0, -58, 4] facing west
- oak stairs at positions [0, -56, 6], [1, -56, 6], and [0, -56, 5]
- a cut sandstone at positions [0, -60, 1], [
Sign info: 


The high-level task:
{'description': 'Move to the nearby forest and get information about the sheep entities.', 'meta-data': {'milestones': ['Move to the forest within 10 seconds', 'Get information about 3 sheep entities within 20 seconds']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['performMovement', 'scanNearbyEntities', 'craftBlock', 'withdrawItem', 'placeBlock', 'navigateTo', 'read', 'get_entity_info', 'MineBlock', 'fetchContainerContents'], 'private_tools': {'Alice': [], 'Bob': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 2 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'sandstone_wall', 'position': [1, -59, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 2]}, {'name': 'cut_sandstone', 'position': [0, -60, 3]}, {'name': 'jigsaw', 'position': [4, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [4, -59, 1], 'powered': False}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [5, -59, 1], 'powered': False}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 3]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [5, -59, 3]}, {'name': 'jigsaw', 'position': [2, -60, 3]}, {'name': 'dirt', 'position': [1, -61, 7]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 10]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Move to the nearby forest.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can fish, you need to set the water and the fish and the fishing rod., Agent can talk with other agents, you need to specify the agent name and the topic.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['fish', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': 'Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic.', 'entities': ['cod', 'zombie'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['fishing_rod', 'axe'], 'environment': 'stormy', 'milestones': [{'milestone': 'catch a cod', 'reward': 10}, {'milestone': 'talk to Agent Bob about fishing', 'reward': 5}]}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['fish', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': 'Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic.', 'entities': ['cod', 'zombie'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['fishing_rod', 'axe'], 'environment': 'stormy', 'milestones': [{'milestone': 'catch a cod', 'reward': 10}, {'milestone': 'talk to Agent Bob about fishing', 'reward': 5}]}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** 
- Alice is located at position [-3, -59, 14] and is holding a fishing rod.
- Bob is not present in the given environment info.
- Other entities: 
  - cod at [2, -60, 15]
  - salmon at [0, -60, 16]
  - tropical_fish at [2, -60, 16]
  - sheep at [0, -59, 0] and [-12, -59, 12]
  - slime at [5, -59, 21] and [-13, -59, 22]

**Blocks:** 
- Water at [-5, -61, 0], [-3, -61, 13], [-4, -61, 14], and [-3, -61, 14]
- Dirt at [-5, -62, 0]
- Gold ore at [-5, -60, 0]
- Grass block at [-4, -61, 13], [-5, -61, 13], and [-4, -61, 12]
- Oak trapdoor at [-4, -60, 15] (facing north)

Sign info: 


The high-level task:
{'description': 'Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic.', 'meta-data': {'milestones': [{'milestone': 'catch a cod', 'reward': 10}, {'milestone': 'talk to Agent Bob about fishing', 'reward': 5}]}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['startFishing', 'placeBlock', 'withdrawItem', 'navigateTo', 'craftBlock', 'talkTo', 'read', 'scanNearbyEntities', 'get_entity_info', 'fetchContainerContents', 'stopFishing', 'MineBlock'], 'private_tools': {'Alice': [], 'Bob': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 2 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Navigate to the water at [-3, -61, 13] and start fishing.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic..
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** 
- Alice is located at position [-3, -59, 14] and is holding a fishing rod.
- Bob is not present in the given environment info.
- Other entities: 
  - cod at [2, -60, 15]
  - salmon at [0, -60, 16]
  - tropical_fish at [2, -60, 16]
  - sheep at [0, -59, 0] and [-12, -59, 12]
  - slime at [5, -59, 21] and [-13, -59, 22]

**Blocks:** 
- Water at [-5, -61, 0], [-3, -61, 13], [-4, -61, 14], and [-3, -61, 14]
- Dirt at [-5, -62, 0]
- Gold ore at [-5, -60, 0]
- Grass block at [-4, -61, 13], [-5, -61, 13], and [-4, -61, 12]
- Oak trapdoor at [-4, -60, 15] (facing north)

Sign info: 

agent state:
['No history found.', 'No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the water at [-3, -61, 13] and start fishing and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['startFishing', 'placeBlock', 'withdrawItem', 'navigateTo', 'craftBlock', 'talkTo', 'read', 'scanNearbyEntities', 'get_entity_info', 'fetchContainerContents', 'stopFishing', 'MineBlock'], 'private_tools': {'Alice': [], 'Bob': []}}

The high-level task
{'description': 'Agent Alice needs to fish in the water and catch a cod. After catching the fish, Agent Alice needs to talk to Agent Bob about the fishing topic.', 'meta-data': {'milestones': [{'milestone': 'catch a cod', 'reward': 10}, {'milestone': 'talk to Agent Bob about fishing', 'reward': 5}]}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 2 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 14], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 13]}, {'name': 'water', 'position': [-3, -61, 13]}, {'name': 'grass_block', 'position': [-5, -61, 13]}, {'name': 'water', 'position': [-4, -61, 14]}, {'facing': 'north', 'name': 'oak_trapdoor', 'open': False, 'position': [-4, -60, 15], 'powered': False}, {'name': 'grass_block', 'position': [-4, -61, 12]}, {'name': 'water', 'position': [-3, -61, 14]}, {'name': 'oak_pressure_plate', 'position': [-5, -60, 15], 'powered': False}, {'name': 'poppy', 'position': [-2, -60, 15]}, {'face': 'wall', 'facing': 'north', 'name': 'lever', 'position': [-6, -60, 15], 'powered': False}, {'face': 'wall', 'facing': 'north', 'name': 'stone_button', 'position': [-7, -60, 15], 'powered': False}, {'facing': 'north', 'hinge': 'left', 'name': 'oak_door', 'open': False, 'position': [-8, -60, 15], 'powered': False}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 10]}, {'name': 'glass', 'position': [-4, -59, 20]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'crafting_table', 'position': [-10, -60, 15]}, {'name': 'glass', 'position': [-3, -59, 20]}, {'facing': 'north', 'name': 'furnace', 'position': [-11, -60, 15]}, {'name': 'iron_ore', 'position': [-12, -60, 15]}, {'name': 'cobblestone', 'position': [-13, -60, 15]}, {'name': 'oak_planks', 'position': [-14, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 5]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 15]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 5]}, {'name': 'cobblestone', 'position': [2, -60, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 5]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 6]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'facing': 'north', 'name': 'oak_stairs', 'position': [1, -56, 6]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 5]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}], 'sign_info': '', 'nearby_entities': [{'cod': [2, -60, 15]}, {'salmon': [0, -60, 16]}, {'tropical_fish': [2, -60, 16]}, {'sheep': [0, -59, 0]}, {'sheep': [-12, -59, 12]}, {'slime': [5, -59, 21]}, {'slime': [-13, -59, 22]}], 'time': 'day'}
*** The task *** : Navigate to the water at [-3, -61, 13] and start fishing.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 

    Generate a task description for the agent to complete in the Minecraft environment.
    [TASK Action]:
    Agent can perform movement, you can ask the agent to jump forward back left right for Seconds., Agent can interact with doors, buttons, levers, pressure plates, and trapdoors. You need to set them and let the agent interact with them.
    Agent can not trade or talk with villagers.
    Agent can be given materials, foods, tools, for finish the task.
    The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
    The common materials, entities, equipments, food, and tools names:
    materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
    agents: ['Alice', 'Bob']
    entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
    equipments: ['helmet', 'chestplate', 'leggings', 'boots']
    food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
    other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
    tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
    You need to design a task description that includes 1~2 of the above actions for agents to complete.
    return in json format.
    {
        "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
        "agents": [...], a list of agents in the environment.
        "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
        "entities": [...], a list of entities in the environment.
        "materials": [...], a list of materials in the environment.
        "equipments": [...], a list of equipments in the environment.
        "tools": [...], a list of tools in the environment.
        "environment": str, "rainy, sunny, snowy, desert, etc."
        "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
    }
    


-----------
Prompt : 

    Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
    attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
    talkTo, waitForFeedback, storeItem, ToggleAction,
    sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
    startFishing, stopFishing, mountEntity, dismountEntity.

    Current Task Description is:
    {'main_actions': ['move', 'interact'], 'agents': ['Alice'], 'task_description': 'Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.', 'entities': ['zombie', 'sheep'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'savanna', 'milestones': ['Move forward for 5 seconds', 'Open the wooden door']}
    Only select the agent tools that are necessary for the agent to complete the task.
    return in json format.
    {
        "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
    }
    


-----------
Prompt : 

    Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

    1. set the environ_op:
    /time set day/night
    /weather clear/rain/thunder

    2. set the place_op:
    "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
    "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
    /place template prefix+houses

    3. summon entities_op:
    /summon name int int int

    4. set the blocks_op:
    /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
    write text on the sign in the environment:
    /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
    
    5. set the inventory_op:
    /give agent_name minecraft:name{Count:int}

    6. set optional materials_op:
    give logs, planks, cobblestone, iron_ore etc. to the environment:
    remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
    At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
    /setblock int -60 int minecraft:name
    
    make the environment more interesting:
    flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
    /setblock int -60 int minecraft:name
    At least 6 fishes need to be in the water:
    cod, salmon, pufferfish, tropical_fish.
    water should be placed in the environment for at least 6 blocks y=-61.
    /setblock int -61 int minecraft:water
    the animals need to be in the grass:
    sheep, cow, rabbit, pig, chicken.

    Remember: equippent should named in material_toolname format like: iron_sword.

    You need to generate OP according to the task json generated by the LLM.
    The task json:
    {'main_actions': ['move', 'interact'], 'agents': ['Alice'], 'task_description': 'Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.', 'entities': ['zombie', 'sheep'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'savanna', 'milestones': ['Move forward for 5 seconds', 'Open the wooden door']}
    remember the center of the environment is (0, -60, 0). 
    The environment size is 15*10*15.
    houses are placed in the center 5*10*5 area.
    materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
    return in json format.
    {
        "environ_op":["/..."], a list of OP for set the environment.
        "place_op": str, place template house OP.
        "entities_op":["/..."], a list of OP to summon the entites.
        "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
        "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
        "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
    }
    


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wooden_axe': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}], 'sign_info': 'Welcome to Savanna', 'nearby_entities': [{'salmon': [3, -60, 3]}, {'pufferfish': [4, -60, 4]}, {'tropical_fish': [6, -60, 6]}, {'sheep': [8, -59, 8]}, {'cow': [9, -59, 9]}], 'time': 'day'}
*** The task *** : Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.Welcome to Savanna.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
* Entity: Alice is located at position [-4, -60, 1] and is holding one wooden axe.
* Blocks: 
  - Water at position [-5, -61, 0]
  - Dirt at position [-5, -62, 0]
  - Gold ore at position [-5, -60, 0]
* Creatures: 
  - Salmon at position [3, -60, 3]
  - Pufferfish at position [4, -60, 4]
  - Tropical fish at position [6, -60, 6]
  - Sheep at position [8, -59, 8]
  - Cow at position [9, -59, 9]
* Interactive-Items: None are explicitly mentioned in the environment info. However, the task mentions a wooden door that Alice needs to interact with. The position of the wooden door is not provided in the environment info.

Note: There is no mention of a chest, crafting table, or furnace in the provided environment info. The sign at the location reads "Welcome to Savanna", but its position is not specified. Plants are also not mentioned in the environment info.
Sign info: Welcome to Savanna


The high-level task:
{'description': 'Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.', 'meta-data': {'milestones': ['Move forward for 5 seconds', 'Open the wooden door']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'ToggleAction'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wooden_axe': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}], 'sign_info': 'Welcome to Savanna', 'nearby_entities': [{'salmon': [3, -60, 3]}, {'pufferfish': [4, -60, 4]}, {'tropical_fish': [6, -60, 6]}, {'sheep': [8, -59, 8]}, {'cow': [9, -59, 9]}], 'time': 'day'}
*** The task *** : Move forward for 5 secondsWelcome to Savanna.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move forward for 5 seconds

Current Milestone:
['Start moving forward', 'Continue moving forward for 5 seconds']

Actions and Observations:

Thought: To accomplish the task of moving forward for 5 seconds, I need to use the performMovement action. However, before I can do that, I should check my current position and the position of any obstacles or entities in front of me to ensure safe movement.

Action:
```json
{
  "action": "get_entity_info",
  "action_input": {
    "player_name": "Alice",
    "target_name": "Alice"
  }
}
```

{'data': {'info': 'cannot find alice.', 'name': 'alice', 'num': 0}, 'message': 'cannot find alice.', 'new_events': ['My inventory: wooden_axe: 1 stone_pickaxe: 1 heldItem: wooden_axe '], 'status': True}

#RL-Recommended-Action:
repairItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "summary": str,  # Analysis explanation
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'wooden_axe': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'gold_ore', 'position': [-5, -60, 0]}], 'sign_info': 'Welcome to Savanna', 'nearby_entities': [{'salmon': [3, -60, 3]}, {'pufferfish': [4, -60, 4]}, {'tropical_fish': [6, -60, 6]}, {'sheep': [8, -59, 8]}, {'cow': [9, -59, 9]}], 'time': 'day'}
*** The task *** : Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.Welcome to Savanna.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
* Entity: Alice is located at position [-4, -60, 1] and is holding one wooden axe.
* Blocks: 
  - Water at position [-5, -61, 0]
  - Dirt at position [-5, -62, 0]
  - Gold ore at position [-5, -60, 0]
* Creatures: 
  - Salmon at position [3, -60, 3]
  - Pufferfish at position [4, -60, 4]
  - Tropical fish at position [6, -60, 6]
  - Sheep at position [8, -59, 8]
  - Cow at position [9, -59, 9]
* Interactive-Items: None are explicitly mentioned in the environment info. However, the task mentions a wooden door that Alice needs to interact with.

Note: There is no mention of a chest, crafting table, or furnace in the provided environment info. The sign "Welcome to Savanna" is present, but its position is not specified. Plants are also not mentioned. The task requires Alice to move forward and interact with a wooden door, but the door's position is not provided in the environment info.
Sign info: Welcome to Savanna

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Move forward for 5 seconds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'ToggleAction'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to move forward for 5 seconds and then interact with the wooden door in front of her to open it.', 'meta-data': {'milestones': ['Move forward for 5 seconds', 'Open the wooden door']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can move to a specific location, you need to specify the location near 0, -60, 0., Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['move', 'use_chest'], 'agents': ['Alice'], 'task_description': 'Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.', 'entities': [], 'materials': ['wooden'], 'equipments': [], 'tools': [], 'environment': 'savanna', 'milestones': ['Reach the location near 0, -60, 0', 'Store 5 wooden planks in the chest']}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['move', 'use_chest'], 'agents': ['Alice'], 'task_description': 'Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.', 'entities': [], 'materials': ['wooden'], 'equipments': [], 'tools': [], 'environment': 'savanna', 'milestones': ['Reach the location near 0, -60, 0', 'Store 5 wooden planks in the chest']}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding one oak plank.
Blocks: 
- a chest at position [0, -60, 0] facing north
- a crafting table at position [5, -60, 0]
- a jungle wall sign at position [-1, -60, 1]
- acacia stairs at positions [1, -56, 0], [0, -56, 1], and [2, -56, 0]
- yellow terracotta at positions [2, -58, 1], [1, -58, 2], and [2, -57, 1]
- glass pane at positions [3, -58, 1] and [1, -58, 3]
- acacia planks at positions [1, -56, 1], [5, -56, 1], and [1, -56, 5]
- dirt at positions [-5, -62, 0], [-4, -61, 0], and [-2, -61, 0]
- grass block at positions [-5, -61, 1], [-
Sign info: Store planks here


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Store 5 wooden planks in the chest']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'storeItem'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding one oak plank.
Blocks: 
- a chest at position [0, -60, 0] facing north
- a crafting table at position [5, -60, 0]
- a jungle wall sign at position [-1, -60, 1]
- acacia stairs at positions [1, -56, 0], [0, -56, 1], and [2, -56, 0]
- yellow terracotta at positions [2, -58, 1], [1, -58, 2], and [2, -57, 1]
- glass pane at positions [3, -58, 1] and [1, -58, 3]
- acacia planks at positions [1, -56, 1], [5, -56, 1], and [1, -56, 5]
- dirt at positions [-5, -62, 0], [-4, -61, 0], and [-2, -61, 0]
- grass block at positions [-5, -61, 1], [-
Sign info: Store planks here

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the location near 0, -60, 0 and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'storeItem'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Store 5 wooden planks in the chest']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and store 5 wooden planks in the chest.Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'oak_planks': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'dirt', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-1, -60, 1]}, {'name': 'grass', 'position': [1, -59, 0]}, {'name': 'grass', 'position': [1, -59, 1]}, {'name': 'tall_grass', 'position': [0, -59, 2]}, {'name': 'tall_grass', 'position': [0, -58, 2]}, {'name': 'grass', 'position': [0, -59, 3]}, {'name': 'yellow_terracotta', 'position': [2, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [1, -56, 0]}, {'name': 'yellow_terracotta', 'position': [1, -58, 2]}, {'facing': 'east', 'name': 'acacia_stairs', 'position': [0, -56, 1]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'south', 'name': 'acacia_stairs', 'position': [2, -56, 0]}, {'name': 'yellow_terracotta', 'position': [2, -57, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 1]}, {'name': 'glass_pane', 'position': [1, -58, 3]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'acacia_planks', 'position': [5, -56, 1]}, {'name': 'acacia_planks', 'position': [1, -56, 5]}, {'name': 'jigsaw', 'position': [2, -60, 6]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'crafting_table', 'position': [-10, -60, 10]}], 'sign_info': 'Store planks here', 'nearby_entities': [{'item': [2, -58, 4]}, {'tropical_fish': [1, -60, 5]}, {'cod': [1, -60, 2]}, {'salmon': [2, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Store planks here.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can move to a specific location, you need to specify the location near 0, -60, 0., Agent can fish, you need to set the water and the fish and the fishing rod.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['move', 'fish'], 'agents': ['Alice'], 'task_description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'plains', 'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['move', 'fish'], 'agents': ['Alice'], 'task_description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'entities': ['cod'], 'materials': ['wooden'], 'equipments': [], 'tools': ['fishing_rod'], 'environment': 'plains', 'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'gravel', 'position': [-10, -61, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [4, -59, 5]}, {'cod': [1, -60, 4]}, {'cod': [0, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -60, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -60, 1], and [1, -58, 1] with axis y.
- Cobblestone at positions [-10, -60, 2] and [1, -60, 2].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Diamond ore at position [-10, -60, 4].
- Gold ore at position [-10, -60, 5].
- Coal ore at position [-10, -60, 6].
- Stone at position [-10, -60, 7].
- Dirt at positions [-5, -62, 0], [-2, -61, 0], and [1, -61
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'gravel', 'position': [-10, -61, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [4, -59, 5]}, {'cod': [1, -60, 4]}, {'cod': [0, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -60, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'gravel', 'position': [-10, -61, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [4, -59, 5]}, {'cod': [1, -60, 4]}, {'cod': [0, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -60, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -60, 1], and [1, -58, 1] with axis y.
- Cobblestone at positions [-10, -60, 2] and [1, -60, 2].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Diamond ore at position [-10, -60, 4].
- Gold ore at position [-10, -60, 5].
- Coal ore at position [-10, -60, 6].
- Stone at position [-10, -60, 7].
- Dirt at positions [-5, -62, 0], [-2, -61, 0], and [1, -61
Sign info: Welcome to fishing spot

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Move to the location near 0, -60, 0 and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can use chest, furnace, you can ask the agent to store items, withdraw items, or smelting items, cooking food, but you need to set the chest, furnace, and required items., Agent can read the signs, you need to write the text on the sign.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['store items', 'smelting items'], 'agents': ['Alice'], 'task_description': 'Alice needs to collect 10 wooden logs and store them in the chest. Then, she needs to smelt 5 wooden logs in the furnace to produce charcoal.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'desert', 'milestones': ['Collect 10 wooden logs', 'Store 10 wooden logs in the chest', 'Smelt 5 wooden logs in the furnace to produce charcoal']}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['store items', 'smelting items'], 'agents': ['Alice'], 'task_description': 'Alice needs to collect 10 wooden logs and store them in the chest. Then, she needs to smelt 5 wooden logs in the furnace to produce charcoal.', 'entities': ['sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'desert', 'milestones': ['Collect 10 wooden logs', 'Store 10 wooden logs in the chest', 'Smelt 5 wooden logs in the furnace to produce charcoal']}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can talk with other agents, you need to specify the agent name and the topic., Agent can craft items, you need to specify the item name and give materials to the agent or put the item in the chest or set the item in the environment.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['craft', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to craft a wooden axe and then talk to Agent Bob about the topic 'wooden axe'.", 'entities': ['zombie', 'skeleton', 'sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'plains', 'milestones': ['Agent Alice crafts a wooden axe', "Agent Alice talks to Agent Bob about the topic 'wooden axe'"]}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['craft', 'talk'], 'agents': ['Alice', 'Bob'], 'task_description': "Agent Alice needs to craft a wooden axe and then talk to Agent Bob about the topic 'wooden axe'.", 'entities': ['zombie', 'skeleton', 'sheep', 'cow'], 'materials': ['wooden', 'stone'], 'equipments': ['helmet', 'chestplate'], 'tools': ['axe', 'pickaxe'], 'environment': 'plains', 'milestones': ['Agent Alice crafts a wooden axe', "Agent Alice talks to Agent Bob about the topic 'wooden axe'"]}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 3]}, {'cod': [1, -60, 5]}, {'cod': [0, -60, 2]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1] with axis y.
- Cobblestone at positions [-10, -60, 2], [1, -60, 2], and other positions.
- Wall torch at positions [0, -58, 2] facing west and [0, -58, 4] facing west.
- Oak stairs at positions [0, -56, 0] facing south, [1, -56, 0] facing south, and [0, -56, 1] facing east.
- Oak door at positions [1, -59, 3] and [1, -58, 3], both facing east and not open.
- Glass pane at position [
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 3]}, {'cod': [1, -60, 5]}, {'cod': [0, -60, 2]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 3]}, {'cod': [1, -60, 5]}, {'cod': [0, -60, 2]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1] with axis y.
- Cobblestone at positions [-10, -60, 2], [1, -60, 2], and other positions.
- Jungle wall sign at position [0, -60, 1] facing north.
- Oak stairs at positions [0, -56, 0] facing south and [1, -56, 0] facing south.
- Wall torch at positions [0, -58, 2] facing west and [0, -58, 4] facing west.
- Oak door at positions [1, -59, 3] and [1, -58, 3] facing east.
- Glass pane at position
Sign info: Welcome to fishing spot

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Move to the location near 0, -60, 0 and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 3]}, {'cod': [1, -60, 5]}, {'cod': [0, -60, 2]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 5]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can perform movement, you can ask the agent to jump forward back left right for Seconds., Agent can feed animals, mount the horse.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['jump forward', 'feed animals'], 'agents': ['Alice'], 'task_description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'entities': ['sheep'], 'materials': ['wooden'], 'equipments': [], 'tools': ['shears'], 'environment': 'sunny', 'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully'], 'food': ['wheat_seeds']}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['jump forward', 'feed animals'], 'agents': ['Alice'], 'task_description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'entities': ['sheep'], 'materials': ['wooden'], 'equipments': [], 'tools': ['shears'], 'environment': 'sunny', 'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully'], 'food': ['wheat_seeds']}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, -2], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -3]}, {'name': 'dirt', 'position': [-3, -62, -3]}, {'name': 'grass_block', 'position': [-2, -61, -3]}, {'name': 'grass_block', 'position': [-4, -61, -3]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'water', 'position': [-3, -61, -4]}, {'name': 'grass_block', 'position': [-1, -61, -3]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -58, 2]}, {'cod': [-4, -60, 1]}, {'pufferfish': [-2, -60, 4]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -60, -2] and is holding one wheat seed.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Cut sandstone at positions [2, -60, 0], [0, -60, 2], and [0, -60, 4]
- Smooth sandstone stairs at positions [1, -60, 0] facing south, [0, -60, 1] facing east, and [3, -60, 0] facing south
- Jungle wall sign at position [-5, -60, 0] facing north
- Jigsaw at position [0, -60, 3]
- Dirt at position [-3, -62, -3] and [-2, -61, 0]
- Grass blocks at positions [-2, -61, -3], [-4, -61, -3], and [-1, -61, -3]
- Water at positions [-3, -61, -
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, -2], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -3]}, {'name': 'dirt', 'position': [-3, -62, -3]}, {'name': 'grass_block', 'position': [-2, -61, -3]}, {'name': 'grass_block', 'position': [-4, -61, -3]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'water', 'position': [-3, -61, -4]}, {'name': 'grass_block', 'position': [-1, -61, -3]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -58, 2]}, {'cod': [-4, -60, 1]}, {'pufferfish': [-2, -60, 4]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the farm by jumping forward for 5 secondsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the farm by jumping forward for 5 seconds

Current Milestone:
['Move 5 blocks forward from current position']

Actions and Observations:

To navigate to the farm by jumping forward for 5 seconds, I need to perform the "jump forward" action for 5 seconds.

Action:
```
{
  "action": "performMovement",
  "action_input": {
    "player_name": "Alice",
    "action_name": "jump forward",
    "seconds": 5
  }
}
```

{'message': 'I cannot do this action', 'new_events': ['My inventory: wheat_seeds: 1 salmon: 1 shears: 1 heldItem: wheat_seeds '], 'status': False}

#RL-Recommended-Action:
navigateToBuilding

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, -2], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -3]}, {'name': 'dirt', 'position': [-3, -62, -3]}, {'name': 'grass_block', 'position': [-2, -61, -3]}, {'name': 'grass_block', 'position': [-4, -61, -3]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'water', 'position': [-3, -61, -4]}, {'name': 'grass_block', 'position': [-1, -61, -3]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -58, 2]}, {'cod': [-4, -60, 1]}, {'pufferfish': [-2, -60, 4]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -60, -2] and is holding one wheat seed.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Cut sandstone at positions [2, -60, 0], [0, -60, 2], and [0, -60, 4]
- Smooth sandstone stairs at positions [1, -60, 0] facing south, [0, -60, 1] facing east, and [3, -60, 0] facing south
- Jungle wall sign at position [-5, -60, 0] facing north
- Jigsaw at position [0, -60, 3]
- Dirt at positions [-3, -62, -3] and [-2, -61, 0]
- Grass blocks at positions [-2, -61, -3], [-4, -61, -3], and [-1, -61, -3]
- Water at positions [-3, -61, -
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the farm by jumping forward for 5 seconds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-2, -60, 0], 'held_items': {'tropical_fish': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 1]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-6, -60, 1]}, {'pufferfish': [-1, -60, 1]}, {'tropical_fish': [5, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-2, -60, 0] and is holding one tropical fish.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Emerald ore at position [-6, -60, 10]
- Lapis ore at position [-7, -60, 10]
- Redstone ore at position [-8, -60, 10]
- Dirt at positions [-3, -62, 0] and [-2, -61, 0]
- Grass blocks at positions [-4, -61, 0], [-1, -61, 0], and [-2, -61, 1]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Jungle wall sign at position [-5, -60, 0] facing north
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-2, -60, 0], 'held_items': {'tropical_fish': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 1]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-6, -60, 1]}, {'pufferfish': [-1, -60, 1]}, {'tropical_fish': [5, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds

Current Milestone:
['Reach the crafting table within 5 seconds']

Actions and Observations:

Thought: To navigate to the crafting table at position [5, -60, 0], I need to move Alice from her current position [-2, -60, 0] to the crafting table. Since the distance is not very far, I can use the navigateTo tool to achieve this.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 5,
    "y": -60,
    "z": 0
  }
}
```

{'message': 'move failed, can not reach position 5 -60 0, the position is blocked, check the environment', 'new_events': ['An item drop at (2.4, -60.4, 0.5)', 'My inventory: tropical_fish: 1 wheat_seeds: 1 shears: 1 salmon: 1 heldItem: tropical_fish '], 'status': False}

#RL-Recommended-Action:
enchantItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-2, -60, 0], 'held_items': {'tropical_fish': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 1]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-6, -60, 1]}, {'pufferfish': [-1, -60, 1]}, {'tropical_fish': [5, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-2, -60, 0] and is holding one tropical fish.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Emerald ore at position [-6, -60, 10]
- Lapis ore at position [-7, -60, 10]
- Redstone ore at position [-8, -60, 10]
- Dirt at positions [-3, -62, 0] and [-2, -61, 0]
- Grass blocks at positions [-4, -61, 0], [-1, -61, 0], and [-2, -61, 1]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Jungle wall sign at position [-5, -60, 0] facing north
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-1, -60, 1] and is holding one salmon.
Blocks: 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Furnace: No furnace found
- Wheat at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1]
- Glass at positions [-20, -60, -1], [-20, -59, -1], and [-20, -60, 0]
- Sand at position [-10, -61, 8]
- Gravel at position [-10, -61, 9]
- Cut sandstone at positions [2, -60, 0], [0, -60, 2], and [0, -60, 4]
- Smooth sandstone stairs at positions [1, -60, 0] facing south and [0, -60, 1] facing east
- Jungle wall sign at position [-5, -60, 0] facing
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat at position [1, -59, 1] and collect 3 wheatWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1]. Since I am currently at position [-1, -60, 1], I should move to the specified position.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
wear

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1]. Since I am currently at position [-1, -60, 1], I should move to the specified position.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already navigated to the wheat position [1, -59, 1] and now I need to collect 3 wheat. To do this, I should use the MineBlock tool to dig the wheat blocks at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (1, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
placeBlock

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1]. Since I am currently at position [-1, -60, 1], I should move to the specified position.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already navigated to the wheat position [1, -59, 1] and now I need to collect 3 wheat. To do this, I should use the MineBlock tool to dig the wheat blocks at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (1, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already collected one wheat at position [1, -59, 1] and now I need to collect the remaining two wheat. To do this, I should use the MineBlock tool to dig the wheat blocks at positions [2, -59, 1] and [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 2,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (2, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
mountEntity

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1]. Since I am currently at position [-1, -60, 1], I should move to the specified position.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already navigated to the wheat position [1, -59, 1] and now I need to collect 3 wheat. To do this, I should use the MineBlock tool to dig the wheat blocks at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (1, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already collected one wheat at position [1, -59, 1] and now I need to collect the remaining two wheat. To do this, I should use the MineBlock tool to dig the wheat blocks at positions [2, -59, 1] and [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 2,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (2, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already collected two wheat at positions [1, -59, 1] and [2, -59, 1] and now I need to collect the remaining one wheat. To do this, I should use the MineBlock tool to dig the wheat block at position [3, -59, 1].

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 3,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' dig at (3, -59, 1)', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
read

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
* Entity: Alice is located at position [-1, -60, 1] and is holding one salmon.
* Blocks: 
  - Chest at position [0, -60, 0] facing north.
  - Crafting table at position [5, -60, 0].
  - Composter at position [2, -59, 5].
  - Smooth sandstone stairs at positions [1, -60, 0] facing south, [0, -60, 1] facing east, and [3, -60, 0] facing south.
  - Cut sandstone at positions [2, -60, 0], [0, -60, 2], and [0, -60, 4].
  - Wheat at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1].
  - Grass blocks at positions [-5, -61, -1], [-4, -61, -1], and [-6, -61, -1].
  - Dirt at position [-2, -61, 0].
  - Water at positions [-3, -61, -1],
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the wheat at position [1, -59, 1] and collect 3 wheat and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat at position [1, -59, 1] and collect 3 wheatWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To accomplish the task, I need to navigate to the wheat position first.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
closeContainer

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 1], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'grass_block', 'position': [-6, -61, -1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'glass', 'position': [-20, -60, -1]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'glass', 'position': [-20, -59, -1]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-9, -60, 4]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat at position [1, -59, 1] and collect 3 wheatWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1] to collect 3 wheat. Since I am currently at position [-1, -60, 1], I should move to the wheat position first.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
drink

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 1] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 1] to collect 3 wheat. Since I am currently at position [-1, -60, 1], I should move to the wheat position first.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: I have already navigated to the wheat position [1, -59, 1] and now I need to collect 3 wheat. To do this, I should use the MineBlock tool to dig the wheat block at the current position.

Action:
```
{
  "action": "MineBlock",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': 'cannot dig air at position(1, -59, 1), because this block cannot dig', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': False}

#RL-Recommended-Action:
erectDirtLadder

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 8], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 7]}, {'name': 'dirt', 'position': [-3, -62, 7]}, {'name': 'grass_block', 'position': [-2, -61, 7]}, {'name': 'grass_block', 'position': [-4, -61, 7]}, {'name': 'water', 'position': [-3, -61, 8]}, {'name': 'water', 'position': [-3, -61, 6]}, {'name': 'grass_block', 'position': [-1, -61, 7]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 6]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 6]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 5]}, {'name': 'cut_sandstone', 'position': [2, -60, 6]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'wheat', 'position': [1, -59, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'wheat', 'position': [3, -59, 5]}, {'name': 'wheat', 'position': [1, -59, 3]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}, {'name': 'diamond_ore', 'position': [-11, -60, 10]}, {'name': 'iron_ore', 'position': [-12, -60, 10]}, {'name': 'cobblestone', 'position': [-13, -60, 10]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'glass', 'position': [-2, -60, 20]}, {'name': 'oak_planks', 'position': [-14, -60, 10]}, {'name': 'glass', 'position': [-4, -60, 20]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-5, -60, 1]}, {'salmon': [-2, -58, 0]}, {'pufferfish': [-1, -60, -1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-1, -59, 8] and is holding one wheat seed.
Blocks: 
- a chest at position [0, -60, 0] facing north
- a crafting table at position [5, -60, 0]
- smooth sandstone stairs at positions [0, -60, 6], [1, -60, 6], and [0, -60, 5]
- cut sandstone at positions [2, -60, 6], [0, -60, 4], and [0, -60, 2]
- emerald ore at position [-6, -60, 10]
- lapis ore at position [-7, -60, 10]
- redstone ore at position [-8, -60, 10]
- coal ore at position [-9, -60, 10]
- gold ore at position [-10, -60, 10]
- diamond ore at position [-11, -60, 10]
- iron ore at position [-12, -60, 10]
- cobblestone at position [-13, -60, 10]
- oak planks at position
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 8], 'held_items': {'wheat_seeds': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 7]}, {'name': 'dirt', 'position': [-3, -62, 7]}, {'name': 'grass_block', 'position': [-2, -61, 7]}, {'name': 'grass_block', 'position': [-4, -61, 7]}, {'name': 'water', 'position': [-3, -61, 8]}, {'name': 'water', 'position': [-3, -61, 6]}, {'name': 'grass_block', 'position': [-1, -61, 7]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 6]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 6]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 5]}, {'name': 'cut_sandstone', 'position': [2, -60, 6]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'wheat', 'position': [1, -59, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'wheat', 'position': [3, -59, 5]}, {'name': 'wheat', 'position': [1, -59, 3]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}, {'name': 'diamond_ore', 'position': [-11, -60, 10]}, {'name': 'iron_ore', 'position': [-12, -60, 10]}, {'name': 'cobblestone', 'position': [-13, -60, 10]}, {'name': 'glass', 'position': [-3, -60, 20]}, {'name': 'glass', 'position': [-2, -60, 20]}, {'name': 'oak_planks', 'position': [-14, -60, 10]}, {'name': 'glass', 'position': [-4, -60, 20]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-15, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-5, -60, 1]}, {'salmon': [-2, -58, 0]}, {'pufferfish': [-1, -60, -1]}], 'time': 'day'}
*** The task *** : Navigate to the nearby farm by jumping forward for 5 secondsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the nearby farm by jumping forward for 5 seconds

Current Milestone:
['Move 5 blocks forward from current position']

Actions and Observations:

To navigate to the nearby farm by jumping forward for 5 seconds, I need to perform the "performMovement" action.

Action:
```
{
  "action": "performMovement",
  "action_input": {
    "player_name": "Alice",
    "action_name": "jump forward",
    "seconds": 5
  }
}
```

{'message': 'I cannot do this action', 'new_events': ['My inventory: wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: wheat_seeds '], 'status': False}

#RL-Recommended-Action:
storeItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -1]}, {'name': 'dirt', 'position': [-3, -62, -1]}, {'name': 'grass_block', 'position': [-2, -61, -1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'grass_block', 'position': [-1, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 2]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -60, 0] and is holding one salmon.
**Blocks:** 
- Water at [-3, -61, -1], [-3, -61, 0], and [-3, -61, -2]
- Dirt at [-3, -62, -1]
- Grass blocks at [-2, -61, -1], [-4, -61, -1], and [-1, -61, -1]
- Jungle wall sign at [-5, -60, 0] facing north
- Chest at [0, -60, 0] facing north
- Smooth sandstone stairs at [1, -60, 0] facing south and [0, -60, 1] facing east
- Cut sandstone at [2, -60, 0], [0, -60, 2], and [0, -60, 4]
- Wheat at [1, -59, 1], [2, -59, 1], and [3, -59, 1]
- Crafting table at [5, -60, 0]
- Composter at [2, -
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -1]}, {'name': 'dirt', 'position': [-3, -62, -1]}, {'name': 'grass_block', 'position': [-2, -61, -1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'grass_block', 'position': [-1, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 2]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat location and collect 3 wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat location and collect 3 wheat seeds

Current Milestone:
['Reach the wheat location', 'Collect 3 wheat seeds']

Actions and Observations:

To accomplish the task of navigating to the wheat location and collecting 3 wheat seeds, I first need to move to the wheat location. The wheat is located at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1]. Since I am currently at position [-1, -60, 0], I will navigate to the closest wheat position, which is [1, -59, 1].

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['An item drop at (1.2, -60.5, 0.5)', 'Alice collected 1 Raw Beef', 'Alice collected 2 Leather', 'Alice collected 1 Rabbit Hide', 'My inventory: salmon: 1 tropical_fish: 1 wheat_seeds: 1 shears: 1 beef: 1 leather: 2 rabbit_hide: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
fetchContainerContents

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, -1]}, {'name': 'dirt', 'position': [-3, -62, -1]}, {'name': 'grass_block', 'position': [-2, -61, -1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'water', 'position': [-3, -61, -2]}, {'name': 'grass_block', 'position': [-1, -61, -1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 2]}, {'tropical_fish': [1, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -60, 0] and is holding one salmon.
**Blocks:** 
- Water at [-3, -61, -1], [-3, -61, 0], and [-3, -61, -2]
- Dirt at [-3, -62, -1]
- Grass blocks at [-2, -61, -1], [-4, -61, -1], and [-1, -61, -1]
- Jungle wall sign at [-5, -60, 0] facing north
- Chest at [0, -60, 0] facing north
- Smooth sandstone stairs at [1, -60, 0] facing south and [0, -60, 1] facing east
- Cut sandstone at [2, -60, 0], [0, -60, 2], and [0, -60, 4]
- Wheat at [1, -59, 1], [2, -59, 1], and [3, -59, 1]
- Crafting table at [5, -60, 0]
- Composter at [2, -
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the wheat location and collect 3 wheat seeds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -59, 1]}, {'cod': [1, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -60, 6]}, {'pig': [6, -59, 3]}, {'item': [7, -59, 2]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Oak planks at position [-10, -60, 1].
- Cobblestone at multiple positions including [-10, -60, 2], [1, -60, 2].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Cobblestone at position [2, -59, 1].
- Stripped oak log at multiple positions including [1, -59, 1], [1, -58, 1], [1, -60, 1].
- Oak stairs at multiple positions including [0, -56, 0], [1, -56, 0], [0, -56, 1].
- Wall torch at multiple positions including [0,
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -59, 1]}, {'cod': [1, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -60, 6]}, {'pig': [6, -59, 3]}, {'item': [7, -59, 2]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:

Thought: To reach the position [0, -60, 0], I need to navigate to that location. Since I am already at position [-4, -60, 1], I can move to the desired location.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': True}

#RL-Recommended-Action:
withdrawItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -59, 1]}, {'cod': [1, -60, 1]}, {'cod': [1, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -60, 6]}, {'pig': [6, -59, 3]}, {'item': [7, -59, 2]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Oak planks at position [-10, -60, 1].
- Cobblestone at multiple positions including [-10, -60, 2], [1, -60, 2].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Cobblestone at position [2, -59, 1].
- Stripped oak log at multiple positions including [1, -59, 1], [1, -58, 1], [1, -60, 1].
- Oak stairs at multiple positions including [0, -56, 0], [1, -56, 0], [0, -56, 1].
- Wall torch at multiple positions including [0,
Sign info: Welcome to fishing spot

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the location near 0, -60, 0 and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -59, 0] and is holding one salmon.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Emerald ore at position [-6, -60, 10]
- Lapis ore at position [-7, -60, 10]
- Redstone ore at position [-8, -60, 10]
- Coal ore at position [-9, -60, 10]
- Gold ore at position [-10, -60, 10]
- Dirt at position [5, -61, 2]
- Sand at position [-10, -61, 8]
- Gravel at position [-10, -61, 9]
- Cut sandstone at positions [0, -60, 2], [2, -60, 0], and [0, -60, 4]
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] and [3,
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds

Current Milestone:
['Reach the crafting table within 5 seconds']

Actions and Observations:

To navigate to the crafting table at position [5, -60, 0] and potentially craft wheat seeds, I need to move Alice from her current position [-1, -59, 0] to the crafting table.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 5,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 5 -60 0', 'new_events': ['Alice collected 1 Leather', 'Alice collected 1 Raw Beef', 'My inventory: salmon: 1 tropical_fish: 1 wheat_seeds: 1 shears: 1 leather: 1 beef: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
attackTarget

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
* Entity: Alice is located at position [-1, -59, 0] and is holding one salmon.
* Blocks: 
  - Chest at position [0, -60, 0] facing north.
  - Crafting table at position [5, -60, 0].
  - Composter at position [2, -59, 5].
  - Emerald ore at position [-6, -60, 10].
  - Lapis ore at position [-7, -60, 10].
  - Redstone ore at position [-8, -60, 10].
  - Coal ore at position [-9, -60, 10].
  - Gold ore at position [-10, -60, 10].
  - Grass blocks at positions [-4, -61, 0], [-4, -61, 1], and [-4, -61, -1].
  - Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1].
  - Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds

Current Milestone:
['Reach the crafting table within 5 seconds']

Actions and Observations:

Thought: To reach the crafting table at position [5, -60, 0] within 5 seconds, I need to navigate to that position. Since I am currently located at position [-1, -59, 0], I can use the navigateTo tool to move to the crafting table.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 5,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 5 -60 0', 'new_events': ['My inventory: salmon: 1 tropical_fish: 1 wheat_seeds: 1 shears: 1 leather: 1 beef: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
dismountEntity

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'water', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 1]}, {'name': 'grass_block', 'position': [-4, -61, -1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [-6, -60, 1]}, {'pufferfish': [-2, -60, 6]}, {'tropical_fish': [0, -60, 4]}], 'time': 'day'}
*** The task *** : Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -58, 6], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-1, -61, 5]}, {'name': 'dirt', 'position': [-1, -62, 5]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 5]}, {'name': 'grass_block', 'position': [-2, -61, 5]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 6]}, {'name': 'grass_block', 'position': [-1, -61, 6]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'grass_block', 'position': [-1, -61, 4]}, {'name': 'water', 'position': [-3, -61, 5]}, {'name': 'wheat', 'position': [1, -59, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 6]}, {'name': 'wheat', 'position': [1, -59, 3]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'cut_sandstone', 'position': [2, -60, 6]}, {'name': 'wheat', 'position': [2, -59, 3]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}, {'name': 'diamond_ore', 'position': [-11, -60, 10]}, {'name': 'glass', 'position': [-1, -60, 20]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 1]}, {'tropical_fish': [4, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
* Entity: Alice is located at position [-1, -58, 6] and is holding one salmon.
* Blocks: 
  - Chest at position [0, -60, 0] facing north.
  - Crafting table at position [5, -60, 0].
  - Composter at position [2, -59, 5].
  - Wheat at positions [1, -59, 5], [1, -59, 3], and [2, -59, 3].
  - Cut sandstone at positions [0, -60, 4] and [0, -60, 2] and [2, -60, 6].
  - Smooth sandstone stairs at positions [0, -60, 5] facing east and [0, -60, 6] facing north and [1, -60, 6] facing north.
  - Grass block at positions [-2, -61, 5], [-1, -61, 6], and [-1, -61, 4] and [-1, -61, 5].
  - Water at positions [-1, -61, 5] and [-3,
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -58, 6], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-1, -61, 5]}, {'name': 'dirt', 'position': [-1, -62, 5]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 5]}, {'name': 'grass_block', 'position': [-2, -61, 5]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 6]}, {'name': 'grass_block', 'position': [-1, -61, 6]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'grass_block', 'position': [-1, -61, 4]}, {'name': 'water', 'position': [-3, -61, 5]}, {'name': 'wheat', 'position': [1, -59, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 6]}, {'name': 'wheat', 'position': [1, -59, 3]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'cut_sandstone', 'position': [2, -60, 6]}, {'name': 'wheat', 'position': [2, -59, 3]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}, {'name': 'diamond_ore', 'position': [-11, -60, 10]}, {'name': 'glass', 'position': [-1, -60, 20]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 1]}, {'tropical_fish': [4, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat at position [1, -59, 5] and collect 3 wheatWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat at position [1, -59, 5] and collect 3 wheat

Current Milestone:
['Reach the wheat position', 'Collect 3 wheat']

Actions and Observations:

To start, I need to navigate to the wheat at position [1, -59, 5] to collect 3 wheat. 

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 5
  }
}
```

{'message': ' move to 1 -59 5', 'new_events': ['My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
wear

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -58, 6], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-1, -61, 5]}, {'name': 'dirt', 'position': [-1, -62, 5]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 5]}, {'name': 'grass_block', 'position': [-2, -61, 5]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 6]}, {'name': 'grass_block', 'position': [-1, -61, 6]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'grass_block', 'position': [-1, -61, 4]}, {'name': 'water', 'position': [-3, -61, 5]}, {'name': 'wheat', 'position': [1, -59, 5]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 6]}, {'name': 'wheat', 'position': [1, -59, 3]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'cut_sandstone', 'position': [2, -60, 6]}, {'name': 'wheat', 'position': [2, -59, 3]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'sand', 'position': [-10, -61, 8]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'gravel', 'position': [-10, -61, 9]}, {'name': 'gold_ore', 'position': [-10, -60, 10]}, {'name': 'diamond_ore', 'position': [-11, -60, 10]}, {'name': 'glass', 'position': [-1, -60, 20]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-8, -60, 1]}, {'pufferfish': [-2, -60, 1]}, {'tropical_fish': [4, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -58, 6] and is holding one salmon.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Wheat at positions [1, -59, 5], [1, -59, 3], and [2, -59, 3]
- Cut sandstone at positions [0, -60, 4] and [0, -60, 2] and [2, -60, 6]
- Smooth sandstone stairs at positions [0, -60, 5] facing east, [0, -60, 6] facing north, and [1, -60, 6] facing north
- Grass block at positions [-2, -61, 5], [-1, -61, 6], and [-1, -61, 4]
- Water at positions [-1, -61, 5] and [-3, -61, 5]
- Dirt at position [-1, -62, 
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the wheat at position [1, -59, 5] and collect 3 wheat and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-13, -60, 1]}, {'pufferfish': [-2, -60, -8]}, {'tropical_fish': [1, -60, 5]}, {'item': [1, -59, 4]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -59, 0] and is holding one salmon.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Emerald ore at position [-6, -60, 10]
- Lapis ore at position [-7, -60, 10]
- Redstone ore at position [-8, -60, 10]
- Dirt at position [-3, -62, 0]
- Grass blocks at positions [-2, -61, 0], [-4, -61, 0], and [-1, -61, 0]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south
- Cut sandstone at positions [0, -60, 2], [2, -60, 0], and
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-13, -60, 1]}, {'pufferfish': [-2, -60, -8]}, {'tropical_fish': [1, -60, 5]}, {'item': [1, -59, 4]}], 'time': 'day'}
*** The task *** : Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds

Current Milestone:
['Reach the crafting table within 5 seconds']

Actions and Observations:

To navigate to the crafting table at position [5, -60, 0] and potentially craft wheat seeds, I need to move Alice from her current position [-1, -59, 0] to the crafting table.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 5,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 5 -60 0', 'new_events': ['An item drop at (-3.6, -58.7, 0.6)', 'Alice collected 1 Tropical Fish', 'Alice collected 2 Raw Beef', 'My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 beef: 2 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
wake

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'cod': [-13, -60, 1]}, {'pufferfish': [-2, -60, -8]}, {'tropical_fish': [1, -60, 5]}, {'item': [1, -59, 4]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -59, 0] and is holding one salmon.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Emerald ore at position [-6, -60, 10]
- Lapis ore at position [-7, -60, 10]
- Redstone ore at position [-8, -60, 10]
- Dirt at position [-3, -62, 0]
- Grass blocks at positions [-2, -61, 0], [-4, -61, 0], and [-1, -61, 0]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south
- Cut sandstone at positions [0, -60, 2], [2, -60, 0], and
Sign info: Welcome to the farm

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Navigate to the crafting table at position [5, -60, 0] to potentially craft wheat seeds and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 4]}, {'cod': [1, -60, 0]}, {'cod': [0, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 5]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 4]}, {'cod': [1, -60, 0]}, {'cod': [0, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 5]}], 'time': 'day'}
*** The task *** : Navigate to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:

Thought: To reach the position [0, -60, 0], I need to navigate to that location. Since I am already at position [-4, -60, 1], I can move to the desired location.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': True}

#RL-Recommended-Action:
waitForFeedback

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 1]}, {'cod': [3, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [8, -59, 4]}, {'pig': [8, -59, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Oak planks at position [-10, -60, 1].
- Cobblestone at multiple positions including [-10, -60, 2], [1, -60, 2].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Stripped oak log at multiple positions including [1, -59, 1], [1, -58, 1], [1, -60, 1].
- Oak stairs at multiple positions including [0, -56, 0], [1, -56, 0].
- Wall torch at multiple positions including [0, -58, 2], [0, -58, 4].
- Diamond ore at position [-10, -
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 1]}, {'cod': [3, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [8, -59, 4]}, {'pig': [8, -59, 1]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:

Thought: To reach the location near 0, -60, 0, I need to move Alice to that position. Since Alice is currently at position [-4, -60, 1], I can use the navigateTo tool to move her to the desired location.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': True}

#RL-Recommended-Action:
handoverBlock

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1'}

Your Summary:



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now you have tried to complete the task. 
The task description is:
Move to the location near 0, -60, 0

The milestone description is:
['Reach the location near 0, -60, 0']

The action history is:
I navigated to the coordinates 0 -60 0 and I was holding a fishing rod, which is also the only item in my inventory.
[{'action': {'tool': 'navigateTo', 'tool_input': {'player_name': 'Alice', 'x': 0, 'y': -60, 'z': 0}, 'log': 'Thought: To reach the location near 0, -60, 0, I need to move Alice to that position. Since Alice is currently at position [-4, -60, 1], I can use the navigateTo tool to move her to the desired location.\n\nAction:\n```\n{\n  "action": "navigateTo",\n  "action_input": {\n    "player_name": "Alice",\n    "x": 0,\n    "y": -60,\n    "z": 0\n  }\n}\n```\n'}, 'feedback': {'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': 'True'}}]

Please check whether the task is completed and return a check-strucutre json.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 0], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'name': 'grass_block', 'position': [-1, -61, 1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'cobblestone', 'position': [1, -59, 2]}, {'name': 'dirt', 'position': [2, -61, 6]}, {'name': 'dirt', 'position': [3, -61, 6]}, {'name': 'glass_pane', 'position': [5, -58, 3]}, {'name': 'glass_pane', 'position': [3, -58, 5]}, {'name': 'oak_planks', 'position': [3, -54, 3]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [3, -59, 4]}, {'cod': [14, -60, 7]}, {'cod': [13, -60, 7]}, {'cod': [13, -60, 6]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [0, -59, 0] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Cobblestone at position [-10, -60, 2] and [1, -60, 2].
- Stripped oak log at position [1, -59, 1] and [1, -60, 1].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Cobblestone at position [2, -59, 1].
- Oak stairs at position [0, -56, 0] and [1, -56, 0].
- Wall torch at position [0, -58, 2] and [0, -58, 4].
- Diamond ore at position [-10, -60, 4].
- Gold ore at position [-10,
Sign info: Welcome to fishing spot

agent state:
['I navigated to the coordinates 0 -60 0 and I was holding a fishing rod, which is also the only item in my inventory.']

success previous subtask tracking:
["['Alice'] execute task Move to the location near 0, -60, 0 and feedback: The player moved to the location 0, -60, 0 with a fishing rod in their inventory. The current position is 0, -60, 0, and the player is holding a fishing rod."]

failure previous subtask tracking:
[]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'dirt', 'position': [-7, -61, 10]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 1]}, {'cod': [3, -60, 1]}, {'sheep': [6, -60, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'dirt', 'position': [-7, -61, 10]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [6, -59, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 1]}, {'cod': [3, -60, 1]}, {'sheep': [6, -60, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:

Thought: To reach the location near 0, -60, 0, I need to move Alice to that position. Since Alice is currently at position [-4, -60, 1], I can use the navigateTo tool to move her to the desired location.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': True}

#RL-Recommended-Action:
startFishing

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'dirt', 'position': [5, -61, 1]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [5, -59, 4]}, {'cod': [-8, -60, 6]}, {'pufferfish': [-2, -60, 8]}, {'tropical_fish': [5, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-1, -59, 0] and is holding one salmon.
Blocks: 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Dirt at positions [-3, -62, 0], [5, -61, 1], and [5, -61, 2]
- Grass blocks at positions [-2, -61, 0], [-4, -61, 0], and [-1, -61, 0]
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south, and [3, -60, 0] facing south
- Cut sandstone at positions [0, -60, 2], [2, -60, 0], and [0, -60, 4]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Wheat at positions [
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'salmon': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [3, -60, 0]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'dirt', 'position': [5, -61, 1]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [5, -59, 4]}, {'cod': [-8, -60, 6]}, {'pufferfish': [-2, -60, 8]}, {'tropical_fish': [5, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat position to collect wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat position to collect wheat seeds

Current Milestone:
['Reach the wheat position within 5 seconds']

Actions and Observations:

To navigate to the wheat position, I first need to know the position of the wheat. Since the wheat position is not provided in the environment info, I will use the scanNearbyEntities function to find the wheat.

Action:
```
{
  "action": "scanNearbyEntities",
  "action_input": {
    "player_name": "Alice",
    "item_name": "wheat",
    "radius": 10
  }
}
```

{'data': [{'x': 1, 'y': -59, 'z': 1}], 'message': 'I found wheat at 1 -59 1,', 'new_events': ['An item drop at (-3.6, -58.7, -0.5)', 'Alice collected 1 Tropical Fish', 'My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
MineBlock

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat position to collect wheat seeds

Current Milestone:
['Reach the wheat position within 5 seconds']

Actions and Observations:

To navigate to the wheat position, I first need to know the position of the wheat. Since the wheat position is not provided in the environment info, I will use the scanNearbyEntities function to find the wheat.

Action:
```
{
  "action": "scanNearbyEntities",
  "action_input": {
    "player_name": "Alice",
    "item_name": "wheat",
    "radius": 10
  }
}
```

{'data': [{'x': 1, 'y': -59, 'z': 1}], 'message': 'I found wheat at 1 -59 1,', 'new_events': ['An item drop at (-3.6, -58.7, -0.5)', 'Alice collected 1 Tropical Fish', 'My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 heldItem: salmon '], 'status': True}
Thought: Now that I have the position of the wheat, I can navigate to it. The wheat is located at position [1, -59, 1]. I will use the navigateTo function to move to this position.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 1,
    "y": -59,
    "z": 1
  }
}
```

{'message': ' move to 1 -59 1', 'new_events': ['Alice collected 3 Raw Beef', 'Alice collected 1 Rabbit Hide', 'My inventory: salmon: 1 wheat_seeds: 1 shears: 1 tropical_fish: 1 beef: 3 rabbit_hide: 1 heldItem: salmon '], 'status': True}

#RL-Recommended-Action:
startFishing

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 1 -59 1'}], 'held_items': 'salmon*1', 'bag(aka inventory)': 'salmon*1, wheat_seeds*1, shears*1, tropical_fish*1, beef*3, rabbit_hide*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [0, -60, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 0]}, {'sheep': [6, -60, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -59, 2]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Oak planks at position [-10, -60, 1].
- Cobblestone at multiple positions including [-10, -60, 2], [1, -60, 2].
- Stripped oak log at multiple positions including [1, -59, 1], [1, -58, 1], [1, -60, 1].
- Iron ore at position [-10, -60, 3].
- Jigsaw at position [0, -60, 3].
- Diamond ore at position [-10, -60, 4].
- Gold ore at position [-10, -60, 5].
- Coal ore at position [-10, -60, 6].
- Stone at position [-10, -60, 7].
- Sand at position
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'dirt', 'position': [0, -61, 6]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'dirt', 'position': [1, -61, 6]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [0, -60, 4]}, {'cod': [1, -60, 1]}, {'cod': [2, -60, 0]}, {'sheep': [6, -60, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -59, 2]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:

Thought: To reach the position [0, -60, 0], I need to move from my current location [-4, -60, 1] to the target location. Since I am already at the same y-coordinate, I just need to change my x and z coordinates.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 0
  }
}
```

{'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 heldItem: fishing_rod '], 'status': True}

#RL-Recommended-Action:
placeBlock

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 2], 'held_items': {'oak_door': 1}}], 'blocks_info': [{'name': 'water', 'position': [0, -61, 1]}, {'name': 'dirt', 'position': [0, -62, 1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [2, -60, 5]}, {'cod': [0, -60, 1]}, {'cod': [2, -59, 1]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 0]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [0, -59, 2] and is holding one oak door.
**Blocks:** 
- Water at position [0, -61, 1]
- Dirt at position [0, -62, 1]
- Jungle wall sign at position [0, -60, 1] facing north with the sign info 'Welcome to fishing spot'
**Creatures:** 
- Cod at positions [2, -60, 5], [0, -60, 1], and [2, -59, 1]
- Cow at position [6, -59, 5]
- Pig at position [6, -59, 3]
**Interactive-Items:** 
- Item at position [7, -60, 0] (no specific type mentioned)
Note: There is no chest, crafting table, or furnace mentioned in the environment info. To fish in the water using a fishing rod to catch a cod, Alice would need to move to a location near the water block at [0, -61, 1] and use a fishing rod. The exact position to fish would be near [0, -60, 0] as per the
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 2], 'held_items': {'oak_door': 1}}], 'blocks_info': [{'name': 'water', 'position': [0, -61, 1]}, {'name': 'dirt', 'position': [0, -62, 1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [2, -60, 5]}, {'cod': [0, -60, 1]}, {'cod': [2, -59, 1]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 0]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 2], 'held_items': {'oak_door': 1}}], 'blocks_info': [{'name': 'water', 'position': [0, -61, 1]}, {'name': 'dirt', 'position': [0, -62, 1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [2, -60, 5]}, {'cod': [0, -60, 1]}, {'cod': [2, -59, 1]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 0]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [0, -59, 2] and is holding one oak door.
**Blocks:** 
- Water at position [0, -61, 1]
- Dirt at position [0, -62, 1]
- Jungle wall sign at position [0, -60, 1] facing north with the sign info 'Welcome to fishing spot'
**Creatures:** 
- Cod at positions [2, -60, 5], [0, -60, 1], and [2, -59, 1]
- Cow at position [6, -59, 5]
- Pig at position [6, -59, 3]
**Interactive-Items:** 
- Item at position [7, -60, 0] (no specific type mentioned)
Note: There is no chest, crafting table, or furnace mentioned in the environment info. To fish in the water using a fishing rod to catch a cod, Alice would need to move to a location near the water block at [0, -61, 1] and use a fishing rod. The exact position to fish would be near [0, -60, 0] as instructed.
Sign info: Welcome to fishing spot

agent state:
['No history found.']

success previous subtask tracking:
[]

failure previous subtask tracking:
["['Alice'] execute task Move to the location near 0, -60, 0 and feedback: "]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 2], 'held_items': {'oak_door': 1}}], 'blocks_info': [{'name': 'water', 'position': [0, -61, 1]}, {'name': 'dirt', 'position': [0, -62, 1]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [2, -60, 5]}, {'cod': [0, -60, 1]}, {'cod': [2, -59, 1]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}, {'item': [7, -60, 0]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:

Thought: To accomplish the task, I need to move to the location near 0, -60, 0, which is indicated by the "Welcome to fishing spot" sign. Since I am currently at position [0, -59, 2], I need to move down to reach the target location.

Action:
```
{
  "action": "navigateTo",
  "action_input": {
    "player_name": "Alice",
    "x": 0,
    "y": -60,
    "z": 1
  }
}
```

{'message': ' move to 0 -60 1', 'new_events': ['My inventory: oak_door: 1 fishing_rod: 1 heldItem: oak_door '], 'status': True}

#RL-Recommended-Action:
fetchContainerContents

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 1'}], 'held_items': 'oak_door*1', 'bag(aka inventory)': 'oak_door*1, fishing_rod*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [2, -58, 2]}, {'cod': [0, -60, 4]}, {'cod': [0, -60, 2]}, {'cod': [0, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 4]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [7, -59, 1]}, {'cod': [0, -60, 4]}, {'cod': [1, -60, 2]}, {'cod': [2, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -60, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0].
- Jungle wall sign at position [0, -60, 1].
- Cobblestone at positions [-10, -60, 2], [1, -60, 2], and [2, -59, 1].
- Jigsaw at position [0, -60, 3].
- Iron ore at position [-10, -60, 3].
- Wall torch at positions [0, -58, 2] and [0, -58, 4].
- Diamond ore at position [-10, -60, 4].
- Oak stairs at positions [0, -56, 0], [1, -56, 0], and [0, -56, 1].
- Oak door at positions [1, -59, 3] and [1, -58, 3].
- Glass pane at position [3
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -60, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [7, -59, 1]}, {'cod': [0, -60, 4]}, {'cod': [1, -60, 2]}, {'cod': [2, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
lookAt

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
tossItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
placeBlock

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
fetchContainerContents

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
get_environment_info

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
dismountEntity

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
fetchContainerContents

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
attackTarget

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1, oak_door*1'}

Your Summary:



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now you have tried to complete the task. 
The task description is:
Move to the location near 0, -60, 0

The milestone description is:
['Reach the location near 0, -60, 0']

The action history is:
I navigated to the coordinates 0 -60 0 and I am currently holding a fishing rod, with a fishing rod and an oak door in my inventory.
[{'action': {'tool': 'navigateTo', 'tool_input': {'player_name': 'Alice', 'x': 0, 'y': -60, 'z': 0}, 'log': 'Thought: To reach the location near 0, -60, 0, I need to move from my current position [-4, -60, 1] to the desired location. Since I am already at the same y-coordinate (-60), I just need to move 4 units to the right (east) and 1 unit down to reach the location.\n\nAction:\n```json\n{\n  "action": "navigateTo",\n  "action_input": {\n    "player_name": "Alice",\n    "x": 0,\n    "y": -60,\n    "z": 0\n  }\n}\n```\n'}, 'feedback': {'message': ' move to 0 -60 0', 'new_events': ['My inventory: fishing_rod: 1 oak_door: 1 heldItem: fishing_rod '], 'status': 'True'}}]

Please check whether the task is completed and return a check-strucutre json.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [0, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'water', 'position': [-5, -61, 0]}, {'name': 'dirt', 'position': [-5, -62, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'grass_block', 'position': [-5, -61, 1]}, {'name': 'grass_block', 'position': [-5, -61, -1]}, {'name': 'water', 'position': [-3, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'name': 'grass_block', 'position': [-1, -61, 1]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'name': 'cobblestone', 'position': [1, -59, 2]}, {'name': 'glass_pane', 'position': [5, -58, 3]}, {'name': 'oak_planks', 'position': [3, -54, 3]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [14, -60, 6]}, {'cod': [15, -60, 6]}, {'cod': [12, -60, 6]}, {'item': [5, -59, 9]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}

*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give a decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [0, -59, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- No furnace found in the given environment.
- Oak log at position [-10, -60, 0] with axis 'y'.
- Stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1] with axis 'y'.
- Cobblestone at positions [-10, -60, 2], [1, -60, 2], and [1, -59, 2].
- Oak planks at position [-10, -60, 1] and [3, -54, 3].
- Jungle wall sign at position [0, -60, 1] facing north.
- Oak stairs at positions [0, -56, 0] facing south, [1, -56, 0] facing south, and [0, -56, 1] facing east.
- Wall torch at positions [
Sign info: Welcome to fishing spot

agent state:
['I navigated to the coordinates 0 -60 0 and I am currently holding a fishing rod, with a fishing rod and an oak door in my inventory.']

success previous subtask tracking:
["['Alice'] execute task Move to the location near 0, -60, 0 and feedback: The player navigated to 0, -60, 0 and is currently holding a fishing rod with specific items in their inventory."]

failure previous subtask tracking:
[]

Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}

The high-level task
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 0], 'held_items': {'tropical_fish': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'dirt', 'position': [5, -61, 1]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [6, -59, 2]}, {'cod': [-5, -60, 1]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [3, -60, 1]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-1, -60, 0] and is holding one tropical fish.
**Blocks:** 
- Chest at position [0, -60, 0] facing north
- Crafting table at position [5, -60, 0]
- Composter at position [2, -59, 5]
- Dirt at positions [-3, -62, 0], [5, -61, 1], and [5, -61, 2]
- Grass blocks at positions [-2, -61, 0], [-4, -61, 0], and [-1, -61, 0]
- Water at positions [-3, -61, 0], [-3, -61, 1], and [-3, -61, -1]
- Smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south
- Cut sandstone at positions [0, -60, 2], [2, -60, 0], and [0, -60, 4]
- Wheat at positions [1, -59, 1], [2
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -60, 0], 'held_items': {'tropical_fish': 1}}], 'blocks_info': [{'name': 'water', 'position': [-3, -61, 0]}, {'name': 'dirt', 'position': [-3, -62, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'water', 'position': [-3, -61, 1]}, {'name': 'water', 'position': [-3, -61, -1]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'grass_block', 'position': [-1, -61, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'dirt', 'position': [5, -61, 1]}, {'name': 'dirt', 'position': [5, -61, 2]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [6, -59, 2]}, {'cod': [-5, -60, 1]}, {'pufferfish': [-2, -60, 5]}, {'tropical_fish': [3, -60, 1]}], 'time': 'day'}
*** The task *** : Navigate to the wheat position [1, -59, 1] to collect wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat position [1, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat position within 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
withdrawItem

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat position [1, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat position within 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please analyze:
1. Does the current #RL-Recommended-Action match the most recent LLM action? Is it reasonable?
2. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
3. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 3]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'item': [3, -59, 0]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-3, -59, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1] with axis y.
- Cobblestone at positions [-10, -60, 2] and [1, -60, 2].
- Water at positions [0, -61, 2], [0, -61, 4], and [0, -61, 5].
- Oak stairs at positions [0, -56, 0] facing south, [1, -56, 0] facing south, and [0, -56, 1] facing east.
- Wall torch at positions [0, -58, 2] facing west and [0, -58, 4] facing west.
- Oak door at positions [1,
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 3]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'item': [3, -59, 0]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
performMovement

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
wear

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
fetchContainerContents

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
ToggleAction

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
attackTarget

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the position [0, -60, 0]']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1, cod*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [5, -58, 3]}, {'cod': [1, -60, 3]}, {'sheep': [5, -59, 7]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-4, -59, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- No furnace found.
- Oak log at position [-10, -60, 0] and stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1].
- Cobblestone at positions [-10, -60, 2] and [1, -60, 2].
- Water at positions [0, -61, 2], [0, -61, 4], and [0, -61, 5].
- Oak stairs at positions [0, -56, 0], [1, -56, 0], and [0, -56, 1].
- Wall torch at positions [0, -58, 2] and [0, -58, 4].
- Oak door at positions [1, -59, 3] and [1, -58, 3].
- Glass
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'item': [5, -58, 3]}, {'cod': [1, -60, 3]}, {'sheep': [5, -59, 7]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
ToggleAction

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
startFishing

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1, cod*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'cod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'water', 'position': [-7, -61, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'water', 'position': [1, -60, 2]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [4, -59, 3]}], 'time': 'day'}
*** The task *** : Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.Welcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-1, -59, 0] and is holding one cod.
Blocks: 
- a chest at position [0, -60, 0] facing north
- a crafting table at position [5, -60, 0]
- a composter at position [2, -59, 5]
- grass blocks at positions [-3, -61, 0], [-2, -61, 0], and [-4, -61, 0]
- smooth sandstone stairs at positions [0, -60, 1] facing east and [1, -60, 0] facing south
- cut sandstone blocks at positions [0, -60, 2], [2, -60, 0], and [0, -60, 4]
- wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1]
- water blocks at positions [-6, -61, 0] and [-7, -61, 0]
- a jigsaw block at position [0, -60, 3]
- emerald ore at
Sign info: Welcome to the farm


The high-level task:
{'description': 'Alice needs to jump forward for 5 seconds to reach the nearby farm and feed the sheep with wheat seeds.', 'meta-data': {'milestones': ['Reach the farm within 10 seconds', 'Feed the sheep successfully']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'UseItemOnEntity', 'get_entity_info'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-1, -59, 0], 'held_items': {'cod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-3, -61, 0]}, {'name': 'grass_block', 'position': [-2, -61, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [-5, -60, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [0, -60, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'facing': 'south', 'name': 'smooth_sandstone_stairs', 'position': [1, -60, 0]}, {'name': 'wheat', 'position': [1, -59, 1]}, {'name': 'water', 'position': [-6, -61, 0]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'cut_sandstone', 'position': [2, -60, 0]}, {'name': 'wheat', 'position': [2, -59, 1]}, {'name': 'water', 'position': [-7, -61, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 4]}, {'name': 'wheat', 'position': [3, -59, 1]}, {'name': 'water', 'position': [1, -60, 2]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'composter', 'position': [2, -59, 5]}, {'name': 'emerald_ore', 'position': [-6, -60, 10]}, {'name': 'lapis_ore', 'position': [-7, -60, 10]}, {'name': 'redstone_ore', 'position': [-8, -60, 10]}, {'name': 'coal_ore', 'position': [-9, -60, 10]}], 'sign_info': 'Welcome to the farm', 'nearby_entities': [{'item': [4, -59, 3]}], 'time': 'day'}
*** The task *** : Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seedsWelcome to the farm.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Navigate to the wheat plants at positions [1, -59, 1], [2, -59, 1], and [3, -59, 1] to collect wheat seeds

Current Milestone:
['Reach the wheat plants', 'Collect wheat seeds']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 1 -59 1'}], 'held_items': 'cod*1', 'bag(aka inventory)': 'cod*1, pufferfish*1, salmon*1, tropical_fish*3, wheat_seeds*1, shears*1, oak_door*1'}

Your Summary:



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
Entity: Alice is located at position [-3, -59, 1] and is holding a fishing rod.
Blocks: 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- Oak log at position [-10, -60, 0] with axis y.
- Stripped oak log at positions [1, -59, 1], [1, -58, 1], and [1, -60, 1] with axis y.
- Cobblestone at positions [-10, -60, 2] and [1, -60, 2].
- Water at positions [0, -61, 2], [0, -61, 4], and [0, -61, 5].
- Iron ore at position [-10, -60, 3].
- Diamond ore at position [-10, -60, 4].
- Gold ore at position [-10, -60, 5].
- Coal ore at position [-10, -60, 6].
- Stone at position [-10, -60, 7].
- Sand at position [-10, -60,
Sign info: Welcome to fishing spot


The high-level task:
{'description': 'Move to the location near 0, -60, 0 and fish in the water using a fishing rod to catch a cod.', 'meta-data': {'milestones': ['Reach the location near 0, -60, 0', 'Catch a cod using the fishing rod']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'performMovement', 'equipItem', 'startFishing', 'stopFishing'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-3, -59, 1], 'held_items': {'fishing_rod': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 0]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -60, 1]}, {'name': 'oak_planks', 'position': [-10, -60, 1]}, {'name': 'cobblestone', 'position': [-10, -60, 2]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -59, 1]}, {'name': 'cobblestone', 'position': [1, -60, 2]}, {'name': 'water', 'position': [0, -61, 2]}, {'name': 'jigsaw', 'position': [0, -60, 3]}, {'name': 'iron_ore', 'position': [-10, -60, 3]}, {'name': 'cobblestone', 'position': [2, -59, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -58, 1]}, {'axis': 'y', 'name': 'stripped_oak_log', 'position': [1, -60, 1]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [0, -56, 0]}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 2]}, {'name': 'diamond_ore', 'position': [-10, -60, 4]}, {'facing': 'south', 'name': 'oak_stairs', 'position': [1, -56, 0]}, {'facing': 'east', 'name': 'oak_stairs', 'position': [0, -56, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -59, 3], 'powered': False}, {'name': 'water', 'position': [0, -61, 4]}, {'name': 'gold_ore', 'position': [-10, -60, 5]}, {'name': 'glass_pane', 'position': [3, -58, 1]}, {'facing': 'east', 'hinge': 'right', 'name': 'oak_door', 'open': False, 'position': [1, -58, 3], 'powered': False}, {'facing': 'west', 'name': 'wall_torch', 'position': [0, -58, 4]}, {'name': 'water', 'position': [0, -61, 5]}, {'name': 'coal_ore', 'position': [-10, -60, 6]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'name': 'stone', 'position': [-10, -60, 7]}, {'name': 'sand', 'position': [-10, -60, 8]}, {'name': 'gravel', 'position': [-10, -60, 9]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, -1]}], 'sign_info': 'Welcome to fishing spot', 'nearby_entities': [{'cod': [1, -60, 1]}, {'sheep': [6, -59, 6]}, {'cow': [6, -59, 5]}, {'pig': [6, -59, 3]}], 'time': 'day'}
*** The task *** : Move to the location near 0, -60, 0Welcome to fishing spot.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
attackTarget

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
waitForFeedback

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
write

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
wake

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Move to the location near 0, -60, 0

Current Milestone:
['Reach the location near 0, -60, 0']

Actions and Observations:


#RL-Recommended-Action:
handoverBlock

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'navigateTo', 'feedback': ' move to 0 -60 0'}], 'held_items': 'fishing_rod*1', 'bag(aka inventory)': 'fishing_rod*1'}

Your Summary:



-----------
Prompt : 

        Generate a task description for the agent to complete in the Minecraft environment.
        [TASK Action]:
        Agent can equip items, you need to specify the item name and the agent name, or put the item in the chest and remind the agent to equip it., Agent can perform movement, you can ask the agent to jump forward back left right for Seconds.
        Agent can not trade or talk with villagers.
        Agent can be given materials, foods, tools, for finish the task.
        The task should only focus on 1~2 [TASK Action], the task should be simple and clear.                              
        The common materials, entities, equipments, food, and tools names:
        materials: ['wooden', 'stone', 'iron', 'golden', 'diamond', 'netherite']
        agents: ['Alice', 'Bob']
        entities: ['zombie', 'skeleton', 'sheep', 'cow', 'rabbit', 'pig', 'chicken', 'creeper', 'spider', 'enderman']
        equipments: ['helmet', 'chestplate', 'leggings', 'boots']
        food: ['mutton', 'beef', 'rabbit', 'porkchop', 'chicken', 'potato', 'cod', 'salmon', 'wheat_seeds', 'melon_seeds', 'pumpkin_seeds', 'beetroot_seeds']
        other_food: ['apple', 'golden_apple', 'carrot', 'beetroot', 'bread', 'cookie', 'baked_potato', 'pumpkin_pie', 'beetroot_soup', 'rabbit_stew', 'mushroom_stew']
        tools: ['axe', 'pickaxe', 'shovel', 'hoe', 'sword', 'flint_and_steel', 'compass', 'shears', 'fishing_rod', 'clock']
        You need to design a task description that includes 1~2 of the above actions for agents to complete.
        return in json format.
        {
            "main_actions": [...], a list of main actions designed for agents to complete in the Minecraft environment (no more than 5).
            "agents": [...], a list of agents in the environment.
            "task_description": str, "The task description designed for each agent to complete in the Minecraft environment."
            "entities": [...], a list of entities in the environment.
            "materials": [...], a list of materials in the environment.
            "equipments": [...], a list of equipments in the environment.
            "tools": [...], a list of tools in the environment.
            "environment": str, "rainy, sunny, snowy, desert, etc."
            "milestones": [...], a list of milestones designed for agents to complete in the Minecraft environment.
        }
        


-----------
Prompt : 

        Select the agent tool for the agent to complete the task in the Minecraft environment. The agent basic tools are:
        attackTarget, UseItemOnEntity, equipItem, handoverBlock, SmeltingCooking, 
        talkTo, waitForFeedback, storeItem, ToggleAction,
        sleep, wake, tossItem, read, get_entity_info, get_environment_info, performMovement,
        startFishing, stopFishing, mountEntity, dismountEntity.

        Current Task Description is:
        {'main_actions': ['equip', 'move'], 'agents': ['Alice'], 'task_description': 'Alice needs to equip a diamond sword and move forward for 5 seconds to reach the nearby cave.', 'entities': ['zombie', 'skeleton'], 'materials': ['diamond'], 'equipments': ['sword'], 'tools': [], 'environment': 'stormy', 'milestones': ['equip diamond sword', 'reach the cave']}
        Only select the agent tools that are necessary for the agent to complete the task.
        return in json format.
        {
            "agent_tool": [...], a list of agent tools selected for the agent to complete the task in the Minecraft environment.
        }
        


-----------
Prompt : 

        Generate a OP command for the agent to complete in the Minecraft environment. The OP command should be designed in various styles.

        1. set the environ_op:
        /time set day/night
        /weather clear/rain/thunder

        2. set the place_op:
        "prefix": ["desert_","plains_","savanna_","snowy_","taiga_"],
        "houses": ["animal_pen", "butcher_shop", "cartographer_house", "butcher_shop", "farm", "fletcher_house", "library", "shepherd_house", "small_house", "weaponsmith", "medium_house"],
        /place template prefix+houses

        3. summon entities_op:
        /summon name int int int

        4. set the blocks_op:
        /setblock int int int chest{Items:[{Slot:int, id:"minecraft:name", Count:int}, {Slot:int, id:"minecraft:name", Count:int}]}
        write text on the sign in the environment:
        /setblock int int int jungle_wall_sign[facing=north]{Text1:str, Text2:str}
        
        5. set the inventory_op:
        /give agent_name minecraft:name{Count:int}

        6. set optional materials_op:
        give logs, planks, cobblestone, iron_ore etc. to the environment:
        remember some names are combined with type_name format like: oak_log, oak_planks, cobblestone.
        At least 10 materials, furnaces, chests, crafting tables, beds, doors, buttons, levers, pressure plates, trapdoors, etc.
        /setblock int -60 int minecraft:name
        
        make the environment more interesting:
        flowers, grass, remember some names are combined with type_name format like: dandelion, poppy, grass_block, water.
        /setblock int -60 int minecraft:name
        At least 6 fishes need to be in the water:
        cod, salmon, pufferfish, tropical_fish.
        water should be placed in the environment for at least 6 blocks y=-61.
        /setblock int -61 int minecraft:water
        the animals need to be in the grass:
        sheep, cow, rabbit, pig, chicken.

        Remember: equippent should named in material_toolname format like: iron_sword.

        You need to generate OP according to the task json generated by the LLM.
        The task json:
        {'main_actions': ['equip', 'move'], 'agents': ['Alice'], 'task_description': 'Alice needs to equip a diamond sword and move forward for 5 seconds to reach the nearby cave.', 'entities': ['zombie', 'skeleton'], 'materials': ['diamond'], 'equipments': ['sword'], 'tools': [], 'environment': 'stormy', 'milestones': ['equip diamond sword', 'reach the cave']}
        remember the center of the environment is (0, -60, 0). 
        The environment size is 15*10*15.
        houses are placed in the center 5*10*5 area.
        materials, chest and agents should be placed in x,z in -15~-5 or 5~15.
        return in json format.
        {
            "environ_op":["/..."], a list of OP for set the environment.
            "place_op": str, place template house OP.
            "entities_op":["/..."], a list of OP to summon the entites.
            "blocks_op":["/..."], a list of OP to set the useful blocks and signs.
            "inventory_op":["/..."], a list of OP to add useful materials to agents or chests.
            "materials_op":["/..."], At least 10 materials, At least 6 water blocks, At least 6 fishes, At least 5 animals.
        }
        


-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -59, 1], 'held_items': {'diamond_sword': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'dandelion', 'position': [-5, -60, 5]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'sandstone_wall', 'position': [0, -59, 2]}, {'name': 'cut_sandstone', 'position': [0, -60, 3]}, {'name': 'sandstone_wall', 'position': [0, -59, 3]}, {'name': 'jigsaw', 'position': [4, -60, 0]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [4, -59, 1], 'powered': False}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [5, -59, 1], 'powered': False}, {'name': 'jigsaw', 'position': [2, -60, 3]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 3]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 10]}, {'name': 'cobblestone', 'position': [-10, -60, -10]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [5, -59, 3]}, {'facing': 'west', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 4]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, 1]}], 'sign_info': 'Welcome to the cave', 'nearby_entities': [{'item': [7, -58, 3]}, {'cod': [1, -60, 2]}, {'salmon': [1, -60, 2]}, {'pufferfish': [0, -60, 3]}, {'sheep': [-3, -59, 5]}, {'cow': [-4, -59, 6]}, {'rabbit': [-3, -59, 6]}], 'time': 'day'}
*** The task *** : Alice needs to equip a diamond sword and move forward for 5 seconds to reach the nearby cave.Welcome to the cave.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : Your current mission is to leader all the players and execute a set of specified tasks within the Minecraft environment.
--- Background Information ---
Our system manages the task as a Directed Acyclic Graph (DAG).
In this turn, you need to decompose the tasks and arrange them in chronological order. Next turn we will analyse your result json to a graph.

A subtask-structure has the following json component:
{
    "id": int, id of the subtask start from 1,
    "description": string, description of the subtask, more detail than a name, for example, place block need position and facing, craft or collect items need the number of items.
    "milestones": list[string]. Make it detailed and specific,
    "retrieval paths": list[string], [~/...] task data is a dict or list, please give the relative path to the data, for example, if the data useful is {"c": 1} dict is {"meta-data": {"blueprint": [{"c": 1}, ]}}, the retrieval path is "~/meta-data/blueprint/0",
    "required subtasks": list[int], if this subtask is directly prerequisite for other subtasks before it, list the subtask id here.
    "assigned agents": list[string], name of agents. dispatch the subtask to the agents.
}


*** Important Notice ***
- The system do not allow agents communicate with each other, so you need to make sure the subtasks are independent.
- Sub-task Dispatch: Post decomposition, the next step is to distribute the sub-tasks amongst yourselves. This will require further communication, where you consider each player's skills, resources, and availability. Ensure the dispatch facilitates smooth, ** parallel ** execution.
- Task Decomposition: These sub-tasks should be small, specific, and executable with MineFlayer code, as you will be using MineFlayer to play MineCraft. The task decomposition will not be a one-time process but an iterative one. At regular intervals during playing the game, agents will be paused and you will plan again based on their progress. You'll propose new sub-tasks that respond to the current circumstances. So you don't need to plan far ahead, but make sure your proposed sub-tasks are small, simple and achievable, to ensure smooth progression. Each sub-task should contribute to the completion of the overall task. That means, the number of sub-tasks should no more than numbers of agents. When necessary, the sub-tasks can be identical for faster task accomplishment. Be specific for the sub-tasks, for example, make sure to specify how many materials are needed.
- In Minecraft, item can be put in agent's inventory, chest, or on the ground. You can use the item in agent's inventory or chest, but you can not use the item on the ground unless you dig it up first.
- The block at lower place should be placed first, and the block at higher place should be placed later. [x,-60,z] is the lowest place. For example, if a task is placing block at x -57 z, then y  -60, -59 and -58 should be placed first and in order.
- Integration and Finalization: In some tasks, you will need to integrate your individual efforts. For example, when crafting complicated stuff that require various materials, after collecting them, you need to consolidate all the materials with one of players.
- You can stop to generate the subtask-structure json if you think the task need the information from the environment, and you can not get the information from the environment now. 

This is not the first time you are handling the task, so you should give part of decompose subtask-structure json feedback. Here is the query:
"""
the environment information around:
The summary of the environment info:
**Entity:** Alice is located at position [-4, -59, 1] and is holding a diamond sword.
**Blocks:** 
- Chest at position [0, -60, 0] facing north.
- Crafting table at position [5, -60, 0].
- No furnace found in the given environment.
- Grass blocks at positions [-5, -61, 0], [-4, -61, 0], and [-6, -61, 0].
- Cut sandstone at positions [0, -60, 1], [0, -60, 2], and [0, -60, 3].
- Sandstone walls at positions [0, -59, 1], [0, -59, 2], and [0, -59, 3].
- Jigsaw at positions [4, -60, 0] and [2, -60, 3].
- Jungle fence gates at positions [4, -59, 1] and [5, -59, 1], both facing south and closed.
- Smooth sandstone stairs at positions [4, -59, 3] facing north, [5, -59, 
Sign info: Welcome to the cave


The high-level task:
{'description': 'Alice needs to equip a diamond sword and move forward for 5 seconds to reach the nearby cave.', 'meta-data': {'milestones': ['equip diamond sword', 'reach the cave']}}


Agent ability: (This is just telling you what the agent can do in one step, subtask should be harder than one step)
{'public_tools': ['MineBlock', 'placeBlock', 'scanNearbyEntities', 'get_entity_info', 'read', 'navigateTo', 'withdrawItem', 'craftBlock', 'fetchContainerContents', 'equipItem', 'performMovement'], 'private_tools': {'Alice': []}}
"""
Your response should exclusively include the identified sub-task or the next step intended for the agent to execute.
So, 1 subtasks is the maximum number of subtasks you can give.
Response should contain a list of subtask-structure JSON.



-----------
Prompt : You are a helpful assistant in Minecraft.
Based on the environment info and the task, extract the key information and summarize the environment info in a concise and informative way.
You should focus on the entities, blocks, and creatures in the environment, and provide a summary of the environment info.

The environment info:
{"person_info": [{"name": "Tom", "position": [-1, -59, 1], "held_items": {"spruce_planks": 1}}], "blocks_info": [{"spruce_planks": [-3, -60, 0]}, {"grass_block": [-2, -61, 0]}, {"chest": [-4, -60, 0], "facing": "W"}, {"oak Log": [-3, -61, 0]}, {"birch_slab": [-3, -60, -1]}, {"birch_slab": [-3, -60, 1]}, {"dirt": [-2, -62, 0]}, {"grass_block": [-2, -61, -1]}, {"grass_block": [-2, -61, 1]}, {"crafting_table": [-4, -60, -1]}, {"facing": "W", "furnace": [-4, -60, 1]}, {"stone_pressure_plate": [-3, -60, 2]}], {"juggle_button": [-3, -60, 3]}], "time": "sunrise"},
nearby_entities': [{'Alice': [42, -59, 125], 'other_entity': 'Alice'}, {'pig': [-3, -59, 0]}, {'pig': [-3, -59, 2]}]
*** The task *** : cook meat in the Minecraft.

The summary of the environment info:
Entity: Tom is located at position [-1, -59, 1] and is holding one spruce plank, Alice is located at position [42, -59, 125].
Blocks: a chest at [-4, -60, 0] facing west, a furnace at [-4, -60, 1] and other bloces.
Creatures: two pigs at [-3, -59, 0] and [-3, -59, 2].
Interactive-Items: a stone pressure plate at [-3, -60, 2], a juggle button at [-3, -60, 3].

The environment info:
{'person_info': [{'name': 'Alice', 'position': [-4, -59, 1], 'held_items': {'diamond_sword': 1}}], 'blocks_info': [{'name': 'grass_block', 'position': [-5, -61, 0]}, {'name': 'grass_block', 'position': [-4, -61, 0]}, {'name': 'grass_block', 'position': [-6, -61, 0]}, {'facing': 'north', 'name': 'chest', 'position': [0, -60, 0]}, {'name': 'dandelion', 'position': [-5, -60, 5]}, {'facing': 'north', 'name': 'jungle_wall_sign', 'position': [0, -59, 0]}, {'name': 'cut_sandstone', 'position': [0, -60, 1]}, {'name': 'sandstone_wall', 'position': [0, -59, 1]}, {'name': 'cut_sandstone', 'position': [0, -60, 2]}, {'name': 'sandstone_wall', 'position': [0, -59, 2]}, {'name': 'cut_sandstone', 'position': [0, -60, 3]}, {'name': 'sandstone_wall', 'position': [0, -59, 3]}, {'name': 'jigsaw', 'position': [4, -60, 0]}, {'name': 'crafting_table', 'position': [5, -60, 0]}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [4, -59, 1], 'powered': False}, {'facing': 'south', 'name': 'jungle_fence_gate', 'open': False, 'position': [5, -59, 1], 'powered': False}, {'name': 'jigsaw', 'position': [2, -60, 3]}, {'facing': 'north', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 3]}, {'name': 'glass', 'position': [-20, -60, 0]}, {'axis': 'y', 'name': 'oak_log', 'position': [-10, -60, 10]}, {'name': 'cobblestone', 'position': [-10, -60, -10]}, {'facing': 'east', 'name': 'smooth_sandstone_stairs', 'position': [5, -59, 3]}, {'facing': 'west', 'name': 'smooth_sandstone_stairs', 'position': [4, -59, 4]}, {'name': 'glass', 'position': [-20, -59, 0]}, {'name': 'glass', 'position': [-20, -60, 1]}], 'sign_info': 'Welcome to the cave', 'nearby_entities': [{'item': [7, -58, 3]}, {'cod': [1, -60, 2]}, {'salmon': [1, -60, 2]}, {'pufferfish': [0, -60, 3]}, {'sheep': [-3, -59, 5]}, {'cow': [-4, -59, 6]}, {'rabbit': [-3, -59, 6]}], 'time': 'day'}
*** The task *** : Equip diamond sword and move forward to reach the nearby caveWelcome to the cave.
Return with Entity, Blocks, Creatures and Interactive-Items, and give all these position of these blocks and entities like chest, crafting table, furnace, animals, and plants.



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
navigateTo

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
wake

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
navigateTo

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
wake

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
get_environment_info

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
get_environment_info

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
placeBlock

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
wake

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
sleep

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : 
You are in a Minecraft world. You are a agent player. You need to use the action history compared with the task description and the milestone description to check whether the task is completed.
The check-strucutre
{
    "reasoning": str, # the reasoning process
    "summary": str, # the summary of the vital information of action history with detailed position number and other parameters, which not included in task description.
    "task_status": bool, # whether the task is completed
}


Now let's evaluate the #RL-Recommended-Action taken for this task.

Task Description:
Equip diamond sword and move forward to reach the nearby cave

Current Milestone:
['equip diamond sword', 'move forward for 5 seconds']

Actions and Observations:


#RL-Recommended-Action:
get_environment_info

Please do not include any other information in your response.
Return in JSON format directly.
1. Rate the #RL-Recommended-Action with a reward:
   -2: Definitely wrong
   -1: Useless/irrelevant
    0: Potentially useful
    1: Useful
    2: Highly effective
2. Has the task been completed? (true/false)

Do not include any other information in your response.
Return in JSON format directly.
{
    "reward": int,   # Value from -2 to 2
    "task_status": bool  # true if milestone is satisfied else false
}



-----------
Prompt : You are a helpful assistant in Minecraft.
You are Alice. Your task is to create a concise running summary of actions and information results in the provided text, focusing on key and potentially important information to remember.

You will receive the current summary and the your latest actions. Combine them, adding relevant key information from the latest development in 1st person past tense and keeping the summary concise.
The subject of the sentence should be Alice.

Summary So Far:


Latest Development:
{'name': 'Alice', 'action_list': [{'behavior': 'performMovement', 'feedback': 'I move forward in a few seconds'}], 'held_items': 'diamond_sword*1', 'bag(aka inventory)': 'diamond_sword*1'}

Your Summary:


